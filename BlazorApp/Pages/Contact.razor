@page "/Contact"
@inject ContactService contactService
@using BlazorApp.Data
@using BlazorApp.Services
@using BlazorApp.Models
@using BlazorApp.Controllers
@using System.ComponentModel.DataAnnotations
@using System.Net.Mail
<PageTitle>Contact</PageTitle>


    <div class="page-container">
        <div class="title-layout">
            <h1>Contact</h1>
            <a><u>Home</u> > Contact </a>
        </div>
        <div class="container mt-4">
            <div class="row">
                <!-- Left Column for Text -->
                <div class="col-md-6">

                    <h2>Onze gegevens</h2>
                     @if (ConObj != null)
        {
            @foreach (var h in ConObj)
            {

            
                
                   @((MarkupString)h.Context)
            
            }
        }
        else
        {

            <h1>ERROR</h1>
        }
                </div>

                <!-- Right Column for Google Maps -->
                <div class="col-md-6">
                    <h1 class="mb-4">Stel ons een vraag</h1>
                    <!-- <form action="submit_form.php" method="post" onsubmit="SubmitForm(); return false;"> -->
                    <EditForm Model="@Model" OnValidSubmit="@SubmitForm" FormName="ContactForm">
                        <DataAnnotationsValidator />
                        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
                        <!-- Name and First Name -->
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <InputText @bind-Value="Model.Name" placeholder="Naam"  class="form-control" id="box" />
                            </div>
                            <div class="form-group col-md-6">
                                <InputText @bind-Value="Model.FirstName" placeholder="Voornaam" class="form-control" id="box" />
                            </div>
                        </div>

                        <!-- Email -->
                        <div class="form-group">
                            <InputText @bind-Value="Model.Email" placeholder="E-mail" class="form-control" id="box" />
                        </div>

                        <!-- Date of Birth -->
                        <div class="form-group">
                            <InputDate @bind-Value="Model.DateOfBirth" placeholder="Geboortedatum" class="form-control" id="box" />
                        </div>

                        <!-- Phone Number -->
                        <div class="form-group">
                            <InputText @bind-Value="Model.PhoneNumber" placeholder="Telefoonnummer" class="form-control" id="box" />
                        </div>

                        <!-- Message -->
                        <div class="form-group">
                            <InputTextArea rows="4" @bind-Value="Model.Message" placeholder="Bericht of vraag" class="form-control" id="box" />
                        </div>

                        <!-- Submit Button -->
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">verstuur</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

    </div>


@code {
    @using System.Net
    @using System.Net.Mail

    IEnumerable<ContactM>? ConObj;

    public ContactModel? Model { get; set; }
    
      protected override async Task OnInitializedAsync()
    {
        Model = new ContactModel();
        ConObj = await Task.Run(() => contactService.GetContent());
    }

    public class ContactModel
    {
        [Required(ErrorMessage = "Naam is verplicht.")]
        public string Name { get; set; }
        [Required(ErrorMessage = "Voornaam is verplicht.")]
        public string FirstName { get; set; }
        [Required(ErrorMessage = "Email is verplicht.")]
        [EmailAddress(ErrorMessage = "Voer een geldig emailadres in.")]
        public string Email { get; set; }
        [Required(ErrorMessage = "Geboortedatum is verplicht.")]
        public DateTime DateOfBirth { get; set; }
        [Required(ErrorMessage = "Telefoonnummer is verplicht.")]
        [RegularExpression(@"[0-9]{10}", ErrorMessage = "Voer een geldig telefoonnummer in.")]
        public string PhoneNumber { get; set; }
        [Required(ErrorMessage = "Een bericht is verplicht.")]
        public string Message { get; set; }
    }

    // Create references for other form fields as needed

    // Define a method to handle the form submission
    private void SubmitForm()
    {
        // Get the values from the form fields
        var name = Model.Name;
        var firstName = Model.FirstName;
        var email = Model.Email;

        // Get values from other form fields as needed
        using (SmtpClient smtpClient = new SmtpClient("your-smtp-server.com"))
        {
            smtpClient.Port = 587;
            smtpClient.Credentials = new NetworkCredential("your-username", "your-password");
            smtpClient.EnableSsl = true;

            using (MailMessage mailMessage = new MailMessage("from-email@example.com", "recipient@example.com"))
            {
                mailMessage.Subject = "Contact Form Submission";
                //mailMessage.Body = email;

                try
                {
                    smtpClient.Send(mailMessage);
                    Console.WriteLine("Email sent successfully.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }
            }
        }
        // Now you can use these values as needed, such as sending them in an email
    }
}

