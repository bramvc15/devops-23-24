@page "/afspraak"
@using BlazorApp.Data
@using BlazorApp.Services.Core
@using BlazorApp.Models
@using BlazorApp.Controllers
@inherits ComponentBase
@inject AppointmentService appointmentService
@inject DoctorService doctorService
@inject PatientService patientService
@inject TimeSlotService timeSlotService
@using Microsoft.AspNetCore.Components.Forms
@using Shared
@using Enums
@using BlazorApp.BlazorShared

<PageTitle>Afspraak maken</PageTitle>

<div class="main-container">
    <div class="title-layout">
        <h1>Afspraak maken</h1>
        <a><u>Home</u> > Afspraak maken </a>
    </div>
    @* <div class="treatments" style="display: @(showTreatment ? "block" : "none")">
        <div class="headerBox">
            <p class="header">1. Waarvoor wilt u een afspraak maken?</p>
        </div>
        <TreatmentStep OnTreatmentSelected="HandleTreatmentSelected" />
    </div> *@
    <div class="doctors" style="display: @(showDoctors ? "block" : "none")">
        <div class="headerBox">
            <p class="header">2. Bij wie wens je een afspraak te maken?</p>
        </div>
        <DoctorStep OnDoctorSelected="HandleDoctorSelected" />
    </div>
    @if(SelectedDoctor != null) {
        <div class="afspraak-plannen" style="display: @(showAfspraak ? "block" : "none")">
            <AppointmentStep OnTimeSlotSelected="HandleTimeChosen" Doctor=SelectedDoctor />
        </div>
    }
    <div class="contact-info" style="display: @(showContact ? "block" : "none")">
        <div class="headerBox">
            <p class="header">4. Vul uw contactgegevens in</p>
        </div>
        <ContactFormStep OnContactSubmitted="HandleClientData" OnReasonSubmitted="HandleReasonSubmitted"/>
    </div>
    <div class="succes" style="display: @(showSucces ? "flex" : "none")">
    @if(SelectedDoctor != null && SelectedTimeSlotDTO != null) {
        <div class="succes-card">
            <h1>Succes!</h1>
            <p>Uw afspraak met dokter @SelectedDoctor.Name is bevestigd!</p>
            <p>Uw afspraak is op @SelectedTimeSlotDTO.DateTime.ToString("dd/MM/yyyy") om @SelectedTimeSlotDTO.DateTime.ToString("HH:mm")</p>
            <br>
            <a href="" class="bck">Ga terug</a>
        </div>
    }
    </div>
</div>

@code {

    private String SelectedTreatment = "";
    private DoctorDTO SelectedDoctor;
    private int? SelectedTimeSlotId;
    private TimeSlotDTO SelectedTimeSlotDTO;
    private string Reason = "";

    private bool showDoctors = true;
    private bool showTreatment = false;
    private bool showAfspraak = false;
    private bool showContact = false;
    private bool showSucces = false;

    private void HandleTreatmentSelected(string selectedTreatment)
    {
        SelectedTreatment = selectedTreatment;
        showTreatment = !showTreatment;
        showDoctors = !showDoctors;
    }


    private async Task HandleDoctorSelected(int? doctorId)
    {
        SelectedDoctor = await doctorService.GetDoctor(doctorId ?? 0);

        showDoctors = !showDoctors;
        showAfspraak = !showAfspraak;
    }

    private async Task HandleTimeChosen(int? timeSlotId)
    {
        SelectedTimeSlotId = timeSlotId;
        IEnumerable<TimeSlotDTO> timeSlots = await timeSlotService.GetTimeSlots(SelectedDoctor);
        SelectedTimeSlotDTO = timeSlots.FirstOrDefault(ts => ts.Id == timeSlotId);

        showAfspraak = !showAfspraak;
        showContact = !showContact;
    }

    private async Task HandleClientData(PatientDTO patient)
    {
        showContact = !showContact;
        showSucces = !showSucces;

        await MakeAppointment(patient);
    }

    private async Task HandleReasonSubmitted(string reason)
    {
        Reason = reason;
    }

    private async Task MakeAppointment(PatientDTO patient)
    {
        PatientDTO createdPatient = await patientService.CreatePatient(patient);

        int patientId = createdPatient.Id ?? 0;
        
        await appointmentService.CreateAppointment((int)SelectedTimeSlotId, patientId, Reason, "note");
    }

}