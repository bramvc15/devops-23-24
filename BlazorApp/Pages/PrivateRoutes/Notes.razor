@page "/admin/notes"
@inherits ComponentBase
@using Shared.DTO.CMS;
@using Services.CMS;
@using Persistence.Data;
@inject NoteService noteService
@using BlazorApp.Components.Modals;
@using Microsoft.AspNetCore.Components;
@inject DatabaseContext databaseContext
@inject NavigationManager NavManager

<PageTitle>Admin - NOTES</PageTitle>

<div class="sidebar">
    <SideNavMenu />
</div>

<div class="note-page">
    <div class="title-layout">
        <h1>Notes</h1>
    </div>
    <div class="addNote">
        <AddNotePopUp />
    </div>
    <div class="alert-container">
        <Alert Color="Color.Danger" @bind-Visible="@visible">
            <AlertDescription>
                @message
            </AlertDescription>
            <AlertMessage>
                @* Gebruiken we niet. *@
            </AlertMessage>
            <CloseButton />
        </Alert>
    </div>

    <div class="notes-container">
        @if (NoteObj != null)
        {
            @foreach (var n in NoteObj)
            {
                    @if (n != null)
                    {
                        <div class="qf" @onclick="( () => ShowModal(n) )">
                                <Note Title="@n.Title" Content="@n.Content"/>
                        </div>
                    }
            }
        }
    </div>
</div>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Notitie wijzigen</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Titel</FieldLabel>
                <TextEdit Placeholder="Wat is een..." @bind-Text="newTitle" />
            </Field>
            <Field>
                <FieldLabel>Content</FieldLabel>
                <TextEdit Placeholder="Dit is een..." @bind-Text="newContent" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
            <Button Color="Color.Danger" Clicked="@DeleteNote">Verwijder</Button>
            <Button Color="Color.Primary" Clicked="@UpdateNote">Opslaan</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool visible = false;
    private string message = string.Empty;

    private IEnumerable<NoteDTO>? NoteObj;
    private NoteDTO clickedNote;

    int? id;
    string? newTitle;
    string? newContent;

    protected override async Task OnInitializedAsync()
    {
        NoteObj = await noteService.GetNotes();
    }

     private Modal? modalRef;

    private async Task<Task?> ShowModal(NoteDTO Note)
    {
        clickedNote = Note;
        id = Note.Id;
        newTitle = Note.Title;
        newContent = Note.Content;
        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    private async void UpdateNote()
    {
        visible = false;
        message = string.Empty;

        var authenticationState = await authenticationStateTask;

        if (authenticationState.User.IsInRole("Admin"))
        {
            NoteDTO note = new()
                {
                    Id = clickedNote.Id,
                    Title = newTitle,
                    Content = newContent
                };
            await noteService.UpdateNote(note);
        }
        else
        {
            message = "U heeft geen toegang tot bewerken.";
            visible = true;
        }

        await HideModal();
    }

    private async void DeleteNote()
    {
        visible = false;
        message = string.Empty;

        var authenticationState = await authenticationStateTask;

        if (authenticationState.User.IsInRole("Admin"))
        {
            await noteService.DeleteNote(clickedNote);
        }
        else
        {
            message = "U heeft geen toegang tot verwijderen.";
            visible = true;
        }
    }
}

