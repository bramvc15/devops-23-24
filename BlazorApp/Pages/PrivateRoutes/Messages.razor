@page "/admin/messages"
@inherits ComponentBase
@using Shared.DTO.Core;
@using Services.Core;
@using Persistence.Data;
@inject MessageService messageService
@using Microsoft.AspNetCore.Components;
@inject DatabaseContext databaseContext
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<PageTitle>Admin - MESSAGES</PageTitle>

<div class="sidebar">
    <SideNavMenu />
</div>

<div class="message-page">
    <div class="title-layout">
        <h1>Berichten</h1>
    </div>
    <div class="messages-container">
        <div class="message-col">
            @if (MessageObj != null)
            {
                @foreach (var m in MessageObj)
                {
                    @if (m != null)
                    {
                            <div class="mail" @onclick="() => ToggleMessage(m.Id)">@m.Name @m.LastName</div>
                    }
                }
            }
        </div>
        <div class="message-content">
             @if (ShowMessageId.HasValue)
            {
                <div class="selected-message">
                    @if (MessageObj != null)
                    {
                        var selectedMessage = MessageObj.FirstOrDefault(m => m?.Id == ShowMessageId);
                        if (selectedMessage != null)
                        {
                            <div class="top-con">
                                <h2>@selectedMessage.Name @selectedMessage.LastName</h2>
                                <button class="del-btn" @onclick="() => ShowDeleteConfirmationPopup(selectedMessage.Id)"><Icon Name="IconName.Delete" /></button>
                                @if (ShowDeleteConfirmation)
                                {
                                    <div class="confirmation-popup" style="display: @(ShowDeleteConfirmation ? "flex" : "none")">
                                        <h3>Bent u zeker?</h3>
                                        <div class="popup-buttons">
                                            <button class="popDel" @onclick="DeleteMessage">Confirm</button>
                                            <button class="popCan" @onclick="CancelDelete">Cancel</button>
                                        </div>
                                    </div>
                                }                            
                            </div>  
                            <span class="line"></span>
                            <div class="head-con">
                                <div class="headers">
                                    <p class="info"><strong>Email:</strong></p>
                                    <p class="info"><strong>Telefoon:</strong></p>
                                </div>
                                <div class="values">
                                    <p class="info">@selectedMessage.Email</p>
                                    <p class="info">@selectedMessage.Phone</p>
                                </div>
                            </div>
                            <span class="line"></span>
                            <p class="msg">@selectedMessage.Note</p>
                        }
                    }
                </div>
            }
            else
            {
                <div class="empty-message">
                    <p>Selecteer eerst een bericht!</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<MessageDTO>? MessageObj;
    private int? ShowMessageId;
    private bool ShowDeleteConfirmation = false;
    private int? MessageIdToDelete;    

    protected override async Task OnInitializedAsync()
    {
        MessageObj = await messageService.GetMessages();
    }

    private void ToggleMessage(int? messageId)
    {
        ShowMessageId = ShowMessageId == messageId ? 0 : messageId;
    }

    private async Task ShowDeleteConfirmationPopup(int? messageId)
    {
        MessageIdToDelete = messageId;
        ShowDeleteConfirmation = true;
    }

    private async Task DeleteMessage()
    {
        if (MessageIdToDelete.HasValue)
        {
            await messageService.DeleteMessage(MessageIdToDelete.Value);
            ShowDeleteConfirmation = false;
            NavManager.NavigateTo("/admin/messages", true);
        }
    }

    private async Task CancelDelete()
    {
        ShowDeleteConfirmation = false;
    }
}