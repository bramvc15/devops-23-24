@page "/admin/chatbot"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using Services.CMS;
@using Shared.DTO.CMS;
@using Persistence.Data;
@inject DatabaseContext databaseContext
@using Microsoft.AspNetCore.Components
@inject ChatbotService chatbotService
@using BlazorApp.Auth;
@inject NavigationManager NavManager
@using BlazorApp.Components.Modals;

<PageTitle>Admin - Chat Bot</PageTitle>

<SideNavMenu />
<div class="content">
    <div class="container">
        @if (!string.IsNullOrEmpty(BlitzWareAuthService.AuthService.userData.Token))
        {
            <h1>Chatbot vragen</h1>
            <div id="accordion">
                @if (chatbotQuestionsList != null)
                {
                    foreach (var question in chatbotQuestionsList)
                    {
                        <ChatbotAccordion Question=question OnDelete="DeleteChatBotQuestion" />
                    }
                }
            </div>
            <ChatbotPopup Text="Voeg vraag toe" Refresh=HandleRefresh />
            <button class="btn btn-primary" @onclick="OnInitializedAsync">Refresh</button>
        }
        else
        {
            <p>You are not authorized to access this page. Please log in.</p>
            <p><a href="/login">Click here to LOGIN.</a></p>
        }
    </div>

</div>
@code {

    [Inject]
    private BlitzWareAuthService BlitzWareAuthService { get; set; }

    private IEnumerable<ChatBotQuestionDTO>? chatbotQuestionsList;
    private bool collapsed = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(BlitzWareAuthService.AuthService.userData.Token))
            NavManager.NavigateTo("/login");
        else
        {
            chatbotQuestionsList = await chatbotService.GetContent();
            chatbotQuestionsList = chatbotQuestionsList.Where(x => x.IsFollowUp == false);
        }
    }

    protected async Task HandleRefresh()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    protected async Task DeleteChatBotQuestion(ChatBotQuestionDTO question)
    {
        chatbotQuestionsList = chatbotQuestionsList.Where(x => x.Id != question.Id);
        StateHasChanged();
    }

    void Collapse()
    {
        collapsed = !collapsed;
    }
}