@page "/admin/chatbot"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using BlazorApp.Data
@using BlazorApp.Services
@using BlazorApp.Models
@using BlazorApp.Controllers
@inject DatabaseContext databaseContext
@using Microsoft.AspNetCore.Components
@inject ChatbotService ChatbotService
@using BlazorApp.Auth
@inject NavigationManager NavManager
@using BlazorApp.Components.Modals

<PageTitle>Index</PageTitle>

<SideNavMenu />
<div class="content"> 
    <div class="container">
        @if (!string.IsNullOrEmpty(BlitzWareAuthService.AuthService.userData.Token))
        {
        <h1>Chatbot vragen</h1>
        <div id="accordion">
        @if (ChatbotQuestionsList != null)
        {
            foreach (var question in ChatbotQuestionsList)
            {
                  <ChatbotAccordion Question=question OnDelete=HandleDelete/>
            }
        }
        </div> 
        <ChatbotPopup Text="Voeg vraag toe" Refresh=HandleRefresh />
        <button class="btn btn-primary" @onclick="OnInitializedAsync">Refresh</button>
        } else {
                <p>You are not authorized to access this page. Please log in.</p>
                <p><a href="/login">Click here to LOGIN.</a></p>
        }
    </div>

</div>
@code {

    [Inject]
    private BlitzWareAuthService BlitzWareAuthService { get; set; }

    IEnumerable<ChatBotQuestion>? ChatbotQuestionsList;
    private bool collapsed = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(BlitzWareAuthService.AuthService.userData.Token))
            NavManager.NavigateTo("/login");
        else
        {
            ChatbotQuestionsList = await Task.Run(() => ChatbotService.GetContent());
            ChatbotQuestionsList = ChatbotQuestionsList.Where(x => x.IsFollowUp == null);
        }
    }

    protected async Task HandleRefresh()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    protected async Task HandleDelete(ChatBotQuestion question) {
        ChatbotQuestionsList = ChatbotQuestionsList.Where(x => x.Id != question.Id);
        StateHasChanged();
    }

    void Collapse()
    {
        collapsed = !collapsed;
    }

    
}