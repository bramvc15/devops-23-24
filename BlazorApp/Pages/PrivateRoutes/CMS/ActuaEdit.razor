@page "/admin/cms/actua"
@inherits EditHeaderPopUp
@using Services.CMS;
@using Shared.DTO.CMS;
@using Persistence.Data;
@using BlazorApp.Controllers
@using BlazorApp.Components.Modals
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@inject DatabaseContext databaseContext
@inject BlogService blogService;
@inject NavigationManager NavManager
@using Newtonsoft.Json;

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin - CMS Actua</PageTitle>

<div class="sidebar">
    <SideNavMenu />
</div>

<div class="page-container">
    <div class="title-layout">
        <h1>Actua</h1>
        <a><u>Home</u> > Actua </a>
    </div>
    <div class="actua-container">
        <div class="add-button">
            <AddBlogPopUp />
        </div>
        <div class="actua-box">
            @if (blogs != null)
            {
                foreach (var b in blogs)
                {
                    @if (b != null)
                    {
                        <div class="del-con">
                            <ActuaField Title=@b.Title Text=@b.Text Image=@b.ImageLink Id=@b.Id />
                            <div class="btn-con">
                                <button class="editBlogButton" @onclick="( () => ShowModal(b) )"><strong>Edit</strong></button>
                                <button class="deleteBlogButton" @onclick="( () => DeleteBlog(b) )"><strong>X</strong></button>
                            </div>
                        </div>

                    }
                }
            }
        </div>
    </div>
</div>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Blog updaten</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Titel</FieldLabel>
                <TextEdit Placeholder="Geef titel..." @bind-Text="newTitle" />
            </Field>
            <Field>
                <FieldLabel>Text</FieldLabel>
                <RichTextEdit @ref="richTextEditRef" />
            </Field>
            <Field>
                <FieldLabel>Afbeelding</FieldLabel>
                <TextEdit Placeholder="Geef afbeelding link..." @bind-Text="newImageLink" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
            <Button Color="Color.Primary" Clicked="@UpdateBlog">Opslaan</Button>
        </ModalFooter>
    </ModalContent>
</Modal>



@code {

    private IEnumerable<BlogDTO>? blogs;
    private BlogDTO clickedBlog;

    protected override async Task OnInitializedAsync()
    {
        blogs = await blogService.GetBlogs();
    }

    int? id;
    string? newTitle;
    string? newText;
    string? newImageLink;
    protected new RichTextEdit richTextEditRef;
    protected bool readOnly;
    protected string contentAsHtml;
    protected string contentAsDeltaJson;
    protected string contentAsText;
    protected string savedContent;

    public async Task OnContentChanged()
    {
        contentAsHtml = await richTextEditRef.GetHtmlAsync();
        contentAsDeltaJson = await richTextEditRef.GetDeltaAsync();
        contentAsText = await richTextEditRef.GetTextAsync();
    }

    public async Task OnSave()
    {
        savedContent = await richTextEditRef.GetHtmlAsync();
        await richTextEditRef.ClearAsync();
    }

    private Modal? modalRef;

    private async Task<Task?> ShowModal(BlogDTO blog)
    {
        clickedBlog = blog;
        id = blog.Id;
        newTitle = blog.Title;
        newText = blog.Text;
        newImageLink = blog.ImageLink;
        await richTextEditRef.SetHtmlAsync(newText);
        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    private async void UpdateBlog()
    {
        savedContent = await richTextEditRef.GetHtmlAsync();
        BlogDTO blog = new()
            {
                Id = clickedBlog.Id,
                Title = newTitle,
                Text = savedContent,
                ImageLink = newImageLink
            };
        await blogService.UpdateBlog(blog);
        await HideModal();
        NavManager.NavigateTo("/admin/cms/actua", true);
    }

    private async void DeleteBlog(BlogDTO b)
    {
        await blogService.DeleteBlog(b);
        NavManager.NavigateTo("/admin/cms/actua", true);
    }

}