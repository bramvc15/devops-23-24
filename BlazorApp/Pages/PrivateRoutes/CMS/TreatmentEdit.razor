@page "/admin/cms/behandelingen"
@inherits EditHeaderPopUp
@using Services.CMS;
@using Shared.DTO.CMS;
@using Persistence.Data;
@using BlazorApp.Components.Modals;
@using Microsoft.AspNetCore.Components;
@inject DatabaseContext databaseContext
@inject NavigationManager NavManager
@inject TreatmentService treatmentService

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin - CMS Behandelingen</PageTitle>

<div class="sidebar">
    <SideNavMenu />
</div>

<div class="background-div">
    <div class="overlay">
        <h1>Behandelingen</h1>
        <span class="breadcrumbs">
            Klik op een behandeling om ze te bewerken.
        </span>

        <div class="container mt-40">
            <div class="row ">
                @if (treatments != null)
                {
                    foreach (var treatment in treatments)
                    {
                        <div class="col-md-4 d-flex flex-fill">
                            <TreatmentCard ImageSrc=@treatment.ImageLink Title=@treatment.Name
                                           OnCardClick="( () => ShowModal(treatment) )" />
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>
<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Behandeling wijzigen</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Naam</FieldLabel>
                <TextEdit Placeholder="Naam behandeling..." @bind-Text="newName" />
            </Field>
            <Field>
                <FieldLabel>Beschrijving</FieldLabel>
                @*<RichTextEditor @ref="richTextEditRef" />*@
                <RichTextEdit @ref="richTextEditRef" Theme="RichTextEditTheme.Snow" ContentChanged="@OnContentChanged"
                              PlaceHolder="Beschrijving van de behandeling..." ReadOnly="@readOnly" SubmitOnEnter="false"
                              EnterPressed="@OnSave" ToolbarPosition="Placement.Bottom">
                    <Editor>@newDescription</Editor>
                    <Toolbar>
                        <RichTextEditToolbarGroup>
                            <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                            <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                            <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                                <RichTextEditToolbarSelectItem Value="small" />
                                <RichTextEditToolbarSelectItem Selected />
                                <RichTextEditToolbarSelectItem Value="large" />
                                <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
                            </RichTextEditToolbarSelect>
                            <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                            <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
                        </RichTextEditToolbarGroup>
                        <!-- Custom toolbar content -->
                        <RichTextEditToolbarGroup Float="Float.End">
                            <Button onClick="window.open('https://www.quilljs.com/','quilljs')">
                                <Icon Name="IconName.InfoCircle" />
                            </Button>
                            <Button Clicked="@OnSave">
                                <Icon Name="IconName.Save" />
                            </Button>
                        </RichTextEditToolbarGroup>
                    </Toolbar>
                </RichTextEdit>
            </Field>
            <Field>
                <FieldLabel>Afbeelding</FieldLabel>
                <TextEdit Placeholder="Geef afbeelding link..." @bind-Text="newImage" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
            <Button Color="Color.Primary" Clicked="@UpdateTreatment">Opslaan</Button>
        </ModalFooter>
    </ModalContent>
</Modal>




@code {
    private IEnumerable<TreatmentDTO> treatments;
    private TreatmentDTO clickedTreatment;

    protected override async Task OnInitializedAsync()
    {
        treatments = await treatmentService.GetTreatments();
    }

    int? id;
    string? newName;
    string? newDescription;
    string? newImage;
    protected new RichTextEdit richTextEditRef;
    protected bool readOnly;
    protected string contentAsHtml;
    protected string contentAsDeltaJson;
    protected string contentAsText;
    protected string savedContent;

    public async Task OnContentChanged()
    {
        contentAsHtml = await richTextEditRef.GetHtmlAsync();
        contentAsDeltaJson = await richTextEditRef.GetDeltaAsync();
        contentAsText = await richTextEditRef.GetTextAsync();
    }

    public async Task OnSave()
    {
        savedContent = await richTextEditRef.GetHtmlAsync();
        await richTextEditRef.ClearAsync();
    }

    private Modal? modalRef;

    private async Task<Task?> ShowModal(TreatmentDTO treatment)
    {
        clickedTreatment = treatment;
        id = treatment.Id;
        newName = treatment.Name;
        newDescription = treatment.Description;
        newImage = treatment.ImageLink;
        await richTextEditRef.SetHtmlAsync(newDescription);
        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    private async void UpdateTreatment()
    {
        content = await richTextEditRef.GetHtmlAsync();
        TreatmentDTO treatment = new()
        {
            Id = clickedTreatment.Id,
            Name = newName,
            Description = content,
            ImageLink = newImage
        };
        await treatmentService.UpdateTreatment(treatment);
        await HideModal();
    }
}