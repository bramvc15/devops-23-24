@page "/admin/cms/behandelingen"
@inherits EditHeaderPopUp
@using BlazorApp.Data
@using BlazorApp.Services
@using BlazorApp.Models
@using BlazorApp.Components.Modals
@using Microsoft.AspNetCore.Components
@inject DatabaseContext databaseContext
@using BlazorApp.Auth
@inject NavigationManager NavManager
@inject TreatmentService treatmentService

<PageTitle>Index</PageTitle>
<div class="sidebar">
    <SideNavMenu />
</div>
@if (!string.IsNullOrEmpty(BlitzWareAuthService.AuthService.userData.Token) &&
           BlitzWareAuthService.AuthService.appData.AdminRoleLevel
           ==
           BlitzWareAuthService.AuthService.userData.UserSubLevel)
{
    <div class="background-div">
        <div class="overlay">
            <h1>Behandelingen</h1>
            <span class="breadcrumbs">
                Klik op een behandeling om ze te bewerken.
            </span>

            <div class="container mt-40">
                <div class="row ">
                    @if (TreatmentObj != null)
                    {
                        foreach (var treatment in TreatmentObj)
                        {
                            <div class="col-md-4 d-flex flex-fill">
                                <TreatmentCard ImageSrc=@treatment.Image Title=@treatment.Name OnCardClick="( () => ShowModal(treatment.Name) )" />
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <Modal @ref="modalRef">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>Behandeling wijzigen</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Naam</FieldLabel>
                    <TextEdit Placeholder="Naam behandeling..." @bind-Text="newName" />
                </Field>
                <Field>
                    <FieldLabel>Beschrijving</FieldLabel>
                    @*<RichTextEditor @ref="richTextEditRef" />*@
                    <RichTextEdit @ref="richTextEditRef"
                                  Theme="RichTextEditTheme.Snow"
                                  ContentChanged="@OnContentChanged"
                                  PlaceHolder="Beschrijving van de behandeling..."
                                  ReadOnly="@readOnly"
                                  SubmitOnEnter="false"
                                  EnterPressed="@OnSave"
                                  ToolbarPosition="Placement.Bottom">
                        <Editor>@newDescription</Editor>
                        <Toolbar>
                            <RichTextEditToolbarGroup>
                                <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                                <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                                    <RichTextEditToolbarSelectItem Value="small" />
                                    <RichTextEditToolbarSelectItem Selected />
                                    <RichTextEditToolbarSelectItem Value="large" />
                                    <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
                                </RichTextEditToolbarSelect>
                                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
                            </RichTextEditToolbarGroup>
                            <!-- Custom toolbar content -->
                            <RichTextEditToolbarGroup Float="Float.End">
                                <Button onClick="window.open('https://www.quilljs.com/','quilljs')"><Icon Name="IconName.InfoCircle" /></Button>
                                <Button Clicked="@OnSave"><Icon Name="IconName.Save" /></Button>
                            </RichTextEditToolbarGroup>
                        </Toolbar>
                    </RichTextEdit>
                </Field>
                <Field>
                    <FieldLabel>Image</FieldLabel>
                    <TextEdit Placeholder="Geef image link..." @bind-Text="newImage" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
                <Button Color="Color.Primary" Clicked="@UpdateTreatment">Opslaan</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}
else
{
    <div class="row justify-content-center align-items-center" style="height: 100vh;">
        <div class="col-md-6">
            <p>You are not allowed to access this page!</p>
        </div>
    </div>
}




@code {
    [Inject]
    private BlitzWareAuthService BlitzWareAuthService { get; set; }
    IEnumerable<Treatment> TreatmentObj;
    Treatment Treatment;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(BlitzWareAuthService.AuthService.userData.Token))
            NavManager.NavigateTo("/login");
        TreatmentObj = await Task.Run(() => treatmentService.GetContent());
    }

    int id;
    string? newName;
    string? newDescription;
    string? newImage;
    protected RichTextEdit richTextEditRef;
    protected bool readOnly;
    protected string contentAsHtml;
    protected string contentAsDeltaJson;
    protected string contentAsText;
    protected string savedContent;

    public async Task OnContentChanged()
    {
        contentAsHtml = await richTextEditRef.GetHtmlAsync();
        contentAsDeltaJson = await richTextEditRef.GetDeltaAsync();
        contentAsText = await richTextEditRef.GetTextAsync();
    }

    public async Task OnSave()
    {
        savedContent = await richTextEditRef.GetHtmlAsync();
        await richTextEditRef.ClearAsync();
    }

    private Modal? modalRef;

    private Task? ShowModal(string name)
    {
        Treatment = treatmentService.GetContentByName(name);
        id = Treatment.Id;
        newName = Treatment.Name;
        newDescription = Treatment.Description;
        newImage = Treatment.Image;
        richTextEditRef.SetHtmlAsync(newDescription);

        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    private async void UpdateTreatment()
    {
        content = await richTextEditRef.GetHtmlAsync();
        treatmentService.UpdateTreatment(id, newName, content, newImage);

        HideModal();
    }
}