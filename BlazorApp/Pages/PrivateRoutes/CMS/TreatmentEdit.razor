@page "/admin/cms/behandelingen"
@using Services.CMS;
@using Shared.DTO.CMS;
@using Persistence.Data;
@using BlazorApp.Components.Modals;
@using Microsoft.AspNetCore.Components;
@inject DatabaseContext databaseContext
@inject NavigationManager NavManager
@inject TreatmentService treatmentService

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin - CMS Behandelingen</PageTitle>

<div class="sidebar">
    <SideNavMenu />
</div>

    <div class="overlay">
        <h1>Behandelingen</h1>
        <span class="breadcrumbs">
            Klik op een behandeling om ze te bewerken.
        </span>
        <div class="top-bar">
            <input type="text" @bind-value="searchQuery" placeholder="Zoek behandelingen" />
            <AddTreatmentPopUp />
        </div>
        <div class="container mt-40 resp">
            <div class="row ">
                @if (GetFilteredTreatments() != null)
                {
                    var filteredTreatments = GetFilteredTreatments();
                    foreach (var treatment in filteredTreatments)
                    {
                        <div class="col-md-4 d-flex flex-fill">
                            <TreatmentCard ImageSrc=@treatment.ImageLink Title=@treatment.Name
                                           OnCardClick="( () => ShowModal(treatment) )" />
                        </div>
                    }
                }
            </div>
        </div>
    </div>
<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Behandeling wijzigen</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Naam</FieldLabel>
                <TextEdit Placeholder="Naam behandeling..." @bind-Text="newName" />
                @if (string.IsNullOrWhiteSpace(newName))
                    {
                        <p class="text-danger">Naam is verplicht</p>
                    }
            </Field>
            <Field>
                <FieldLabel>Beschrijving</FieldLabel>
                <TextEdit Placeholder="Naam behandeling..." @bind-Text="newDescription" />
            </Field>
            @if (string.IsNullOrWhiteSpace(newDescription))
                    {
                        <p class="text-danger">Beschrijving is verplicht</p>
                    }
            <Field>
                <FieldLabel>Afbeelding</FieldLabel>
                <TextEdit Placeholder="Geef afbeelding link..." @bind-Text="newImage" />
            </Field>
            @if (string.IsNullOrWhiteSpace(newImage))
                    {
                        <p class="text-danger">Afbeelding is verplicht</p>
                    }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
            <Button Color="Color.Danger" Clicked="@(() => DeleteTreatment(clickedTreatment))">Verwijder</Button>
            <Button Color="Color.Primary" Clicked="@UpdateTreatment" Disabled="@(!AreRequiredFieldsFilled())">Opslaan</Button>
        </ModalFooter>
    </ModalContent>
</Modal>




 @code {
    private string searchQuery = "";

    private IEnumerable<TreatmentDTO> treatments;
    private TreatmentDTO clickedTreatment;
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        treatments = await treatmentService.GetTreatments();

        var treatment = new TreatmentDTO();

        editContext = new EditContext(treatment);
        editContext.OnFieldChanged += (sender, eventArgs) =>
        {
            editContext.Validate();
            StateHasChanged();
        };
    }

    int? id;
    string? newName;
    string? newDescription;
    string? newImage;

    private Modal? modalRef;

    private async Task<Task?> ShowModal(TreatmentDTO treatment)
    {
        clickedTreatment = treatment;
        id = treatment.Id;
        newName = treatment.Name;
        newDescription = treatment.Description;
        newImage = treatment.ImageLink;
        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    private async void UpdateTreatment()
    {
        TreatmentDTO treatment = new()
            {
                Id = clickedTreatment.Id,
                Name = newName,
                Description = newDescription,
                ImageLink = newImage
            };
        await treatmentService.UpdateTreatment(treatment);
        await HideModal();
        NavManager.NavigateTo("/admin/cms/behandelingen", true);
    }

    private bool AreRequiredFieldsFilled()
    {
        return !string.IsNullOrWhiteSpace(newName)
        && !string.IsNullOrWhiteSpace(newDescription)
        && !string.IsNullOrWhiteSpace(newImage);
    }

    IEnumerable<TreatmentDTO>? GetFilteredTreatments()
    {
        if (treatments != null && !string.IsNullOrEmpty(searchQuery))
        {
            return treatments.Where(t => t.Name.ToLower().Contains(searchQuery.ToLower()));
        }
        return treatments;
    }

    void Search()
    {
        StateHasChanged();
    }

    private async void DeleteTreatment(TreatmentDTO t)
    {
            await treatmentService.DeleteTreatment(t);
            NavManager.NavigateTo("/admin/cms/behandelingen", true);
    }

}