@page "/admin/cms/faq"
@inherits ComponentBase
@using Shared.DTO.CMS;
@using Services.CMS;
@using Persistence.Data;
@inject FaqService faqService
@using BlazorApp.Components.Modals;
@using Microsoft.AspNetCore.Components;
@inject DatabaseContext databaseContext
@inject NavigationManager NavManager

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin - CMS FAQ</PageTitle>

<div class="sidebar">
    <SideNavMenu />
</div>

<div class="faq-page">
    <div class="title-layout">
        <h1>FAQ</h1>
        <a><u>Home</u> > FAQ </a>
    </div>
    <div class="addFaq">
        <AddFaqPopUp />
    </div>
    <div class="alert-container">
        <Alert Color="Color.Danger" @bind-Visible="@visible">
            <AlertDescription>
                @message
            </AlertDescription>
            <AlertMessage>
                @* Gebruiken we niet. *@
            </AlertMessage>
            <CloseButton />
        </Alert>
    </div>
    <div class="faq-container">
        @if (FaqObj != null)
        {
            @foreach (var f in FaqObj)
            {
                <div class="question-container">
                    @if (f != null)
                    {
                        <div class="mini-conatainer">
                            <div class="qf" @onclick="( () => ShowModal(f) )">
                                <QuestionFAQ Question=@f.Question Answer=@f.Answer />
                            </div>
                            <button class="deleteFaqButton" @onclick="( () => DeleteFaq(f) )"><strong>X</strong></button>
                        </div>
                        <span class="line"></span>
                    }
                </div>
            }
        }
        else
        {
            <p>FaqObj is null.</p>
        }
    </div>
</div>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Vraag wijzigen</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Vraag</FieldLabel>
                <TextEdit Placeholder="Wat is een..." @bind-Text="newQuestion" />
            </Field>
            <Field>
                <FieldLabel>Antwoord</FieldLabel>
                <TextEdit Placeholder="Dit is een..." @bind-Text="newAnswer" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
            <Button Color="Color.Primary" Clicked="@UpdateFaq">Opslaan</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool visible = false;
    private string message = string.Empty;

    private IEnumerable<FaqDTO>? FaqObj;
    private FaqDTO clickedFaq;

    protected override async Task OnInitializedAsync()
    {
        FaqObj = await faqService.GetFaqs();
    }

    int? id;
    string? newQuestion;
    string? newAnswer;

    private Modal? modalRef;

    private async Task<Task?> ShowModal(FaqDTO Faq)
    {
        clickedFaq = Faq;
        id = Faq.Id;
        newQuestion = Faq.Question;
        newAnswer = Faq.Answer;
        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    private async void UpdateFaq()
    {
        visible = false;
        message = string.Empty;

        var authenticationState = await authenticationStateTask;

        if (authenticationState.User.IsInRole("Admin"))
        {
            FaqDTO faq = new()
                {
                    Id = clickedFaq.Id,
                    Question = newQuestion,
                    Answer = newAnswer
                };
            await faqService.UpdateFaq(faq);
        }
        else
        {
            message = "U heeft geen toegang tot bewerken.";
            visible = true;
        }

        await HideModal();
    }

    private async void DeleteFaq(FaqDTO f)
    {
        visible = false;
        message = string.Empty;

        var authenticationState = await authenticationStateTask;

        if (authenticationState.User.IsInRole("Admin"))
        {
            await faqService.DeleteFaq(f);
        }
        else
        {
            message = "U heeft geen toegang tot verwijderen.";
            visible = true;
        }
    }


}


