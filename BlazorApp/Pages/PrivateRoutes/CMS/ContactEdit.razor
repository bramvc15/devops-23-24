@page "/admin/cms/contact"
@using BlazorApp.Auth
@using BlazorApp.Data
@using BlazorApp.Services
@using BlazorApp.Models
@using BlazorApp.Controllers
@using BlazorApp.Components.Modals
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavManager
@inject CMSContactService contactService
@inject LocationService locationService


<PageTitle>Admin - CMS Contact</PageTitle>

<div class="sidebar">
    <SideNavMenu />
</div>
@if (!string.IsNullOrEmpty(BlitzWareAuthService.AuthService.userData.Token) &&
                 BlitzWareAuthService.AuthService.appData.AdminRoleLevel
                 ==
                 BlitzWareAuthService.AuthService.userData.UserSubLevel)
{
    <div class="page-container">
        <ModalPopUp/>
        <div class="title-layout">
           
            <h1>Contact</h1>
            <a><u>Home</u> > Contact </a>
            
        </div>
        
        <div class="container mt-4">
 <ContactModal/>
            
            <div class="row">
                
                <!-- Left Column for Text -->
                <div class="col-md-6">

                    <h2>Onze gegevens</h2>
                           @if (ConObj != null)
        {
            @foreach (var h in ConObj)
            {

            
                
                   @((MarkupString)h.Context)
            
            }
        }
        else
        {

            <h1>ERROR</h1>
        }
                </div>

                <!-- Right Column for Google Maps -->
                <div class="col-md-6">
                    <h1 class="mb-4">Stel ons een vraag</h1>
                    <EditForm Model="@Model" OnValidSubmit="@SubmitForm" FormName="ContactForm">
                        <DataAnnotationsValidator />
                        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
                        <!-- Name and First Name -->
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <InputText @bind-Value="Model.Name" placeholder="Naam"  class="form-control" id="box" />
                            </div>
                            <div class="form-group col-md-6">
                                <InputText @bind-Value="Model.FirstName" placeholder="Voornaam" class="form-control" id="box" />
                            </div>
                        </div>

                        <!-- Email -->
                        <div class="form-group">
                            <InputText @bind-Value="Model.Email" placeholder="E-mail" class="form-control" id="box" />
                        </div>

                        <!-- Date of Birth -->
                        <div class="form-group">
                            <InputDate @bind-Value="Model.DateOfBirth" placeholder="Geboortedatum" class="form-control" id="box" />
                        </div>

                        <!-- Phone Number -->
                        <div class="form-group">
                            <InputText @bind-Value="Model.PhoneNumber" placeholder="Telefoonnummer" class="form-control" id="box" />
                        </div>

                        <!-- Message -->
                        <div class="form-group">
                            <InputTextArea rows="4" @bind-Value="Model.Message" placeholder="Bericht of vraag" class="form-control" id="box" />
                        </div>

                        <!-- Submit Button -->
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">verstuur</button>
                        </div>
                    </EditForm>







                </div>
            </div>
        </div>

        <div class="container mt-4">
            <ModalPopUp />
            <div class="row">
                <!-- Left Column for Text -->
                <div class="col-md-6">
                    <h2>Onze locatie</h2>
                    @if (LocObj != null)
                    {
                        @foreach (var h in LocObj)
                        {



                            @((MarkupString)h.Context)

                        }
                    }
                    else
                    {

                        <h1>ERROR</h1>
                    }
                </div>

                <!-- Right Column for Google Maps -->
                <div class="col-md-6">
                    <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d160404.48929096633!2d3.549413672523532!3d51.08409896849969!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x47c370e1339443ad%3A0x40099ab2f4d5140!2sGent!5e0!3m2!1snl!2sbe!4v1696930185595!5m2!1snl!2sbe" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Inject]
    private BlitzWareAuthService BlitzWareAuthService { get; set; }
    
    IEnumerable<ContactM>? ConObj;
    IEnumerable<LocationM>? LocObj;

    public ContactModel? Model { get; set; }
    
      protected override async Task OnInitializedAsync()
    {
        
        Model = new ContactModel();
        if (string.IsNullOrEmpty(BlitzWareAuthService.AuthService.userData.Token))
            NavManager.NavigateTo("/login");
        ConObj = await contactService.GetContent();
        LocObj = await locationService.GetContent();
    }

    public class ContactModel
    {
        [Required(ErrorMessage = "Naam is verplicht.")]
        public string Name { get; set; }
        [Required(ErrorMessage = "Voornaam is verplicht.")]
        public string FirstName { get; set; }
        [Required(ErrorMessage = "Email is verplicht.")]
        [EmailAddress(ErrorMessage = "Voer een geldig emailadres in.")]
        public string Email { get; set; }
        [Required(ErrorMessage = "Geboortedatum is verplicht.")]
        public DateTime DateOfBirth { get; set; }
        [Required(ErrorMessage = "Telefoonnummer is verplicht.")]
        [RegularExpression(@"[0-9]{10}", ErrorMessage = "Voer een geldig telefoonnummer in.")]
        public string PhoneNumber { get; set; }
        [Required(ErrorMessage = "Een bericht is verplicht.")]
        public string Message { get; set; }
    }

    private void SubmitForm()
    {
    
    }

}