@page "/admin/kalenders/myagenda"
@using BlazorApp.Components.Modals
@using Services.Core;
@using Shared.DTO.Core;
@inject NavigationManager NavManager

@inject TimeSlotService timeSlotService
@inject DoctorService doctorService
@inject AppointmentService appointmentService

@attribute [Authorize(Roles = "Admin, Employee")]


<div class="sidebar">
    <SideNavMenu />
</div>
<div class="content">
    <div class="agenda-container">
            <h1>Agenda</h1>
            <Select TValue="int?" SelectedValue="@SelectedDoctor" SelectedValueChanged="@OnSelectedValueChanged" >
            @if(Doctors != null) {
                @foreach (var doctor in Doctors)
                {
                    <SelectItem TValue="int?" Value="@doctor.Id">@doctor.Name</SelectItem>
                }
            }
            </Select>
            <SfSchedule TValue="AppointmentData" @bind-SelectedDate="@CurrentDate" AllowInline="true">
                <ScheduleEventSettings DataSource="@DataSource">
                    <Template>
                        <div class="template-wrap">
                            @{
                                var data = context as AppointmentData;
                                <div class="subject"><b>@data.StartTime.ToString("HH:mm") - @data.EndTime.ToString("HH:mm")</b> @data.Subject</div>
                            }
                        </div>
                    </Template>
                </ScheduleEventSettings>
                <ScheduleTimeScale Enable="true" SlotCount="1" Interval="15"></ScheduleTimeScale>
                <ScheduleViews>
                    <ScheduleView Option="View.Day" StartHour="07:00" EndHour="20:00"></ScheduleView>
                    <ScheduleView Option="View.Week" StartHour="07:00" EndHour="20:00" FirstDayOfWeek="1"></ScheduleView>
                    <ScheduleView Option="View.WorkWeek" StartHour="07:00" EndHour="20:00"></ScheduleView>
                    <ScheduleView Option="View.Month" StartHour="07:00" EndHour="20:00"></ScheduleView>
                    <ScheduleView Option="View.Agenda" StartHour="07:00" EndHour="20:00"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>
    </div>
</div>

@code {

    private IEnumerable<TimeSlotDTO> TimeSlots { get; set; }

    private IEnumerable<TimeSlotDTO> TimeSlotsByWeek { get; set; }

    private DateTime currentWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek).AddDays(1);
    private DateTime currentWeekEnd = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek).AddDays(7);

    private DateTime CurrentDate = DateTime.Now;
    private List<AppointmentData> DataSource = new List<AppointmentData>();
    private IEnumerable<DoctorDTO> Doctors { get; set; }
    private int SelectedDoctor { get; set; }


    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
        public string CssClass { get; set; }
    }

    private AppointmentData MapToAppointmentData(TimeSlotDTO timeSlot)
    {
        AppointmentData appointmentData = new AppointmentData
        {
            Id = (int)timeSlot.Id,
            StartTime = timeSlot.DateTime,
            EndTime = timeSlot.DateTime.AddMinutes(timeSlot.Duration),
        };

        if(timeSlot.AppointmentDTO != null)
        {
            appointmentData.Subject = timeSlot.AppointmentDTO.PatientDTO.Name;
            appointmentData.CssClass = "occupied";
        }
        else
        {
            appointmentData.Subject = "Beschikbaar";
            appointmentData.CssClass = "available";
        }

        return appointmentData;
    }

    private async Task LoadTimeSlots(int doctorId)
    {
        TimeSlots = await timeSlotService.GetTimeSlots(SelectedDoctor);
        DataSource.Clear();

        foreach (var timeSlot in TimeSlots)
        {
            DataSource.Add(MapToAppointmentData(timeSlot));
        }

        CurrentDate = DateTime.Now;
    }

    private async Task OnSelectedValueChanged(int? value)
    {
        SelectedDoctor = (int)value;
        await LoadTimeSlots(SelectedDoctor);
    }

    protected override async Task OnInitializedAsync()
    {
        Doctors = await doctorService.GetDoctors();
        SelectedDoctor = (int)Doctors.FirstOrDefault().Id;
        await LoadTimeSlots(SelectedDoctor);
    }

}

<style>
    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.available,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.available,
    .e-schedule .e-month-view .e-appointment.available {
        background: rgba(79, 220, 76, 0.6);
        border-color: rgba(79, 220, 76, 0.6);
    }

    .e-schedule .e-vertical-view .e-all-day-appointment-wrapper .e-appointment.occupied,
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment.occupied,
    .e-schedule .e-month-view .e-appointment.occupied {
        background: #eb4d5b;
        border-color: #eb4d5b;
    }
</style>