@page "/admin/kalenders/myagenda"
@using BlazorApp.Components.Modals
@using Services.Core;
@using Shared.DTO.Core;
@inject NavigationManager NavManager

@inject TimeSlotService timeSlotService
@inject DoctorService doctorService
@inject AppointmentService appointmentService

@attribute [Authorize(Roles = "Admin, Employee")]


<div class="sidebar">
    <SideNavMenu />
</div>
<div class="content">
    <div class="agenda-container">
            <h1>Agenda</h1>
            <SfSchedule TValue="AppointmentData" @bind-SelectedDate="@CurrentDate" AllowInline="true">
                <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
                <ScheduleTimeScale Enable="true" SlotCount="1" Interval="15"></ScheduleTimeScale>
                <ScheduleViews>
                    <ScheduleView Option="View.Day" StartHour="07:00" EndHour="20:00"></ScheduleView>
                    <ScheduleView Option="View.Week" StartHour="07:00" EndHour="20:00" FirstDayOfWeek="1"></ScheduleView>
                    <ScheduleView Option="View.WorkWeek" StartHour="07:00" EndHour="20:00"></ScheduleView>
                    <ScheduleView Option="View.Month" StartHour="07:00" EndHour="20:00"></ScheduleView>
                    <ScheduleView Option="View.Agenda" StartHour="07:00" EndHour="20:00"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>
    </div>
</div>

@code {

    private IEnumerable<TimeSlotDTO> TimeSlots { get; set; }

    private IEnumerable<TimeSlotDTO> TimeSlotsByWeek { get; set; }

    private DateTime currentWeekStart = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek).AddDays(1);
    private DateTime currentWeekEnd = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek).AddDays(7);

    DateTime CurrentDate = DateTime.Now;
    List<AppointmentData> DataSource = new List<AppointmentData>();

    
    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
    }

    private AppointmentData MapToAppointmentData(TimeSlotDTO timeSlot)
    {
        AppointmentData appointmentData = new AppointmentData
        {
            Id = (int)timeSlot.Id,
            Subject = timeSlot.AppointmentDTO.PatientDTO.Name,
            StartTime = timeSlot.DateTime,
            EndTime = timeSlot.DateTime.AddMinutes(timeSlot.Duration),
        };

        return appointmentData;
    }


    protected override async Task OnInitializedAsync()
    {
        DoctorDTO doctor = await doctorService.GetDoctor(2);
        TimeSlots = await timeSlotService.GetTimeSlots((int)doctor.Id);
        TimeSlots = TimeSlots.Where(ts => ts.AppointmentDTO != null);

        foreach (var timeSlot in TimeSlots)
        {
            DataSource.Add(MapToAppointmentData(timeSlot));
        }

        TimeSlotsByWeek = TimeSlots.Where(ts => ts.DateTime >= currentWeekStart && ts.DateTime <= currentWeekEnd);
    }

}