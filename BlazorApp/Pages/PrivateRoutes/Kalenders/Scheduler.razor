@page "/admin/kalenders/scheduler"
@using BlazorApp.Components.Modals
@using Services.Core;
@using Shared.DTO.Core;
@using Shared.Enums;
@inject NavigationManager NavManager
@inject DoctorService doctorService
@inject ScheduleTimeSlotService scheduleTimeSlotService

@attribute [Authorize(Roles = "Admin, Employee")]

<div class="sidebar">
    <SideNavMenu />
</div>
<div class="admin container">
    <div>
        <br />
        <br />
        <br />
        <br />
        <br />
        <h1>Scheduler</h1>
        <Button Color="Color.Primary" Clicked="@ConvertToTimeSlots">Convert</Button>
        <p>Here you can view and edit your schedule.</p>
                @if(Doctors != null) {
        <Select TValue="int?" SelectedValue="@SelectedDoctor" SelectedValueChanged="@OnSelectedValueChanged">
            @foreach (var doctor in Doctors)
            {
                <SelectItem TValue="int?" Value="@doctor.Id">@doctor.Name</SelectItem>
            }
        </Select>
        <AddScheduleTimeSlotPopUp OnScheduleTimeSlotAdded="HandleScheduleTimeSlotAdded" DoctorId="SelectedDoctor" />
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Monday</th>
                    <th>Tuesday</th>
                    <th>Wednesday</th>
                    <th>Thursday</th>
                    <th>Friday</th>
                    <th>Saturday</th>
                    <th>Sunday</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var listsByDay = new Dictionary<string, List<ScheduleTimeSlotDTO>>
                                    {
                        { "Monday", MondayList },
                        { "Tuesday", TuesdayList },
                        { "Wednesday", WednesdayList },
                        { "Thursday", ThursdayList },
                        { "Friday", FridayList },
                        { "Saturday", SaturdayList },
                        { "Sunday", SundayList }
                    };

                    int maxCount = listsByDay.Values.Max(list => list.Count);

                    for (int i = 0; i < maxCount; i++)
                    {
                        <tr>
                            @foreach (var day in listsByDay.Keys)
                            {
                                var list = listsByDay[day];
                                <td>
                                    @if (i < list.Count)
                                    {
                                        var endTime = list[i].DateTime;
                                        ScheduleTimeSlotDTO timeSlot = list[i];
                                        <div>
                                            <p>@($"{list[i].DateTime.TimeOfDay.ToString("hh\\:mm")} - {endTime.AddMinutes(list[i].Duration).TimeOfDay.ToString("hh\\:mm")}")</p>
                                            <p>@($"{list[i].Duration} minutes")</p>
                                            <br />
                                            <Button Color="Color.Primary" @onclick="() => EditScheduleTimeSlot(timeSlot)">
                                                <Icon Name="IconName.Edit" />
                                            </Button>
                                            <Button Color="Color.Danger" @onclick="() => DeleteScheduleTimeSlot(timeSlot)">
                                                <Icon Name="IconName.Delete" />
                                            </Button>
                                        </div>
                                    }

                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
        }
    </div>
</div>

@code {
    private IEnumerable<ScheduleTimeSlotDTO> ListOfScheduleTimeSlots;
    private List<ScheduleTimeSlotDTO> MondayList = new List<ScheduleTimeSlotDTO>();
    private List<ScheduleTimeSlotDTO> TuesdayList = new List<ScheduleTimeSlotDTO>();
    private List<ScheduleTimeSlotDTO> WednesdayList = new List<ScheduleTimeSlotDTO>();
    private List<ScheduleTimeSlotDTO> ThursdayList = new List<ScheduleTimeSlotDTO>();
    private List<ScheduleTimeSlotDTO> FridayList = new List<ScheduleTimeSlotDTO>();
    private List<ScheduleTimeSlotDTO> SaturdayList = new List<ScheduleTimeSlotDTO>();
    private List<ScheduleTimeSlotDTO> SundayList = new List<ScheduleTimeSlotDTO>();

    private int SelectedDoctor { get; set; }

    private IEnumerable<DoctorDTO> Doctors { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private async Task OnSelectedValueChanged(int? value)
    {
        SelectedDoctor = (int)value;
        Console.WriteLine(SelectedDoctor);
        await RefreshScheduler();
    }

    private async Task ConvertToTimeSlots() {
        DateTime currentDate = DateTime.Now.AddDays(21);

        //doctorService.ConvertScheduleToTimeSlots(nextMonday, 1);
        await scheduleTimeSlotService.ConvertScheduleToTimeSlots(currentDate, 1, SelectedDoctor);

    }

    private async Task HandleScheduleTimeSlotAdded(ScheduleTimeSlotDTO newSlot)
    {
        ListOfScheduleTimeSlots.Append(newSlot);

        switch (newSlot.DayOfWeek)
        {
            case DayOfWeek.Monday:
                MondayList.Add(newSlot);
                break;
            case DayOfWeek.Tuesday:
                TuesdayList.Add(newSlot);
                break;
            case DayOfWeek.Wednesday:
                WednesdayList.Add(newSlot);
                break;
            case DayOfWeek.Thursday:
                ThursdayList.Add(newSlot);
                break;
            case DayOfWeek.Friday:
                FridayList.Add(newSlot);
                break;
            case DayOfWeek.Saturday:
                SaturdayList.Add(newSlot);
                break;
            case DayOfWeek.Sunday:
                SundayList.Add(newSlot);
                break;
        }

        StateHasChanged();
    }

    private async Task EditScheduleTimeSlot(ScheduleTimeSlotDTO timeSlot)
    {
        Console.WriteLine($"Edit button clicked for ScheduleTimeSlot with Id: {timeSlot.Id}");
    }

    private async Task DeleteScheduleTimeSlot(ScheduleTimeSlotDTO timeSlot)
    {
        await scheduleTimeSlotService.DeleteScheduleTimeSlot(timeSlot, SelectedDoctor);
    }

    private async Task RefreshScheduler() {
        ListOfScheduleTimeSlots = await scheduleTimeSlotService.GetScheduleTimeSlots(SelectedDoctor);

        ClearWeek();

        foreach (ScheduleTimeSlotDTO scheduleTimeSlot in ListOfScheduleTimeSlots)
        {
            switch (scheduleTimeSlot.DayOfWeek)
            {
                case DayOfWeek.Monday:
                    MondayList.Add(scheduleTimeSlot);
                    break;
                case DayOfWeek.Tuesday:
                    TuesdayList.Add(scheduleTimeSlot);
                    break;
                case DayOfWeek.Wednesday:
                    WednesdayList.Add(scheduleTimeSlot);
                    break;
                case DayOfWeek.Thursday:
                    ThursdayList.Add(scheduleTimeSlot);
                    break;
                case DayOfWeek.Friday:
                    FridayList.Add(scheduleTimeSlot);
                    break;
                case DayOfWeek.Saturday:
                    SaturdayList.Add(scheduleTimeSlot);
                    break;
                case DayOfWeek.Sunday:
                    SundayList.Add(scheduleTimeSlot);
                    break;
            }
        }
    }

    private async Task ClearWeek() {
        MondayList.Clear();
        TuesdayList.Clear();
        WednesdayList.Clear();
        ThursdayList.Clear();
        FridayList.Clear();
        SaturdayList.Clear();
        SundayList.Clear();
    }

    protected override async Task OnInitializedAsync()
    {
        Doctors = await doctorService.GetDoctors();
        RefreshScheduler();
    }
}