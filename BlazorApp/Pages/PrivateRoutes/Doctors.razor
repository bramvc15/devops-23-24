@page "/admin/dokters"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using Persistence.Data
@using Services.Core
@using Shared.DTO.Core
@using BlazorApp.Controllers
@inject DatabaseContext databaseContext
@using Microsoft.AspNetCore.Components
@inject DoctorService doctorService
@inject NavigationManager NavManager
@using BlazorApp.Components.Modals
@using Shared.Enums;

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin - Doctors</PageTitle>

<SideNavMenu />
<div class="content">
    <div class="info-container">
        <h1>Dokters in het systeem</h1>
        <div class="add-button">
            <AddDoctorPopup />
        </div>
        <div class="containerr">
             @if (doctors != null && doctors.Count() > 0) {
                <div class="headers">
                    <p>Id</p>
                    <p>Naam</p>
                    <p>Specialisatie</p>
                    <p>Geslacht</p>
                    <p>Biografie</p>
                    <p>IsBeschikbaar</p>
                    <p>Actions</p>
                </div>
                <span class="headLine"></span>
                @foreach (var doctor in doctors)
                    {
                        index++;
                        <div class="@((index % 2 == 0) ? "even" : "odd") doc-container">
                            <p>@doctor.Id</p>
                            <p>@doctor.Name</p>
                            <p>@doctor.Specialization</p>
                            <p>@doctor.Gender</p>
                            @if (doctor.Biograph == null)
                            {
                                <p class="noBio">Geen Bio</p>
                            } else {
                                <p class="bio">@doctor.Biograph</p>
                            }
                            @if (doctor.IsAvailable == true)
                            {
                                <p>Ja</p>
                            }
                            else
                            {
                                <p>Nee</p>
                            }
                            <div class="doc-action-con">
                                <button class="edit-btn" @onclick="( () => ShowModal(doctor) )"><Icon Name="IconName.Edit" /></button>
                                <button class="del-btn" @onclick="() => DeleteDoctor(doctor)"><Icon Name="IconName.Delete" /></button>
                            </div>
                        </div>
                        <span class="line"></span>
                    }
             }
        </div>
    </div>
</div>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Dokter updaten</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Naam</FieldLabel>
                <TextEdit Placeholder="Geef titel..." @bind-Text="newName" />
            </Field>
            <Field>
                <FieldLabel>Specialisatie</FieldLabel>
                <TextEdit Placeholder="Geef specialisatie..." @bind-Text="newSpecialization" />
            </Field>
            <Field>
                <FieldLabel>Geslacht</FieldLabel>
                <select @bind="newGender">
                    <option value="Male">Man</option>
                    <option value="Female">Vrouw</option>
                    <option value="Other">Anders</option>
                </select>
            </Field>
            <Field>
                <FieldLabel>Biografie</FieldLabel>
                <TextEdit Placeholder="Geef biografie..." @bind-Text="newBio" />
            </Field>
            <Field>
                <FieldLabel>Beschikbaar?</FieldLabel>
                <input type="checkbox"  @bind="newIsAvailable" />
            </Field>
            <Field>
                <FieldLabel>Afbeelding</FieldLabel>
                <TextEdit Placeholder="Geef afbeelding link..." @bind-Text="newImageLink" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
            <Button Color="Color.Primary" Clicked="@UpdateDoctor">Opslaan</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private int index = 0;
    private IEnumerable<DoctorDTO> doctors;
    private DoctorDTO clickedDoctor;

    protected override async Task OnInitializedAsync()
    {
        doctors = await doctorService.GetDoctors();
    }

    int? id;
    string? newName;
    string? newSpecialization;
    Gender newGender;
    string? newBio;
    bool newIsAvailable;
    string? newImageLink;
    protected bool readOnly;

    private Modal? modalRef;

    private async Task<Task?> ShowModal(DoctorDTO doctor)
    {
        clickedDoctor = doctor;
        id = doctor.Id;
        newName = doctor.Name;
        newSpecialization = doctor.Specialization;
        newGender = doctor.Gender;
        newBio = doctor.Biograph;
        newIsAvailable = doctor.IsAvailable;
        newImageLink = doctor.ImageLink;
        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    private async void UpdateDoctor()
    {
        DoctorDTO doctor = new()
        {
            Id = clickedDoctor.Id,
            Name = newName,
            Specialization = newSpecialization,
            Gender = newGender,
            Biograph = newBio,
            IsAvailable = newIsAvailable,
            ImageLink = newImageLink
        };
        await doctorService.UpdateDoctor(doctor);
        await HideModal();
    }

    private async void DeleteDoctor(DoctorDTO d)
    {
        await doctorService.DeleteDoctor(d);
    }
}