@inject TokenProvider TokenProvider

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <p>Determining session state, please wait...</p>
                </Authorizing>
                <NotAuthorized>
                    <div class="not-auth">
                        @* <div class="not-auth-container"> *@
                            <div class="not-auth-info">
                                <h1><strong>Sorry!</strong></h1>
                                <p class="na-p">You're not authorized to reach this page. You need to log in.</p>
                            </div>
                            <div class="not-auth-button">
                                <a class="na-button" href="login?redirectUri=/">Log in</a>
                            </div>
                        @* </div> *@
                    </div>
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <NotFound />
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [Parameter]
    public InitialApplicationState? InitialState { get; set; }

    protected override Task OnInitializedAsync()
    {
        TokenProvider.AccessToken = InitialState?.AccessToken;
        TokenProvider.IdToken = InitialState?.IdToken;
        TokenProvider.RefreshToken = InitialState?.RefreshToken;

        return base.OnInitializedAsync();
    }
}