@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using BlazorApp.Data
@using BlazorApp.Services
@using BlazorApp.Models
@using BlazorApp.Controllers
@inject DatabaseContext databaseContext
@using Microsoft.AspNetCore.Components
@inject ChatbotService ChatbotService
@using BlazorApp.Components.Modals

<div class="card @(collapsed ? "" : "border border-dark")">
    <div class="card-header d-flex justify-content-between" id="headingOne" @onclick=this.Collapse>
    <h5 class="mb-0">
        <button class="btn" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
        @Question.Question
        </button>
    </h5>
    @if(FollowUpQuestions == null || FollowUpQuestions.Count() == 0) {
        <button type="button" class="close mx-2" aria-label="Close" @onclick="() => DeleteQuestion()" @onclick:stopPropagation="true">
            <span aria-hidden="true">&times;</span>
        </button>
    }
    </div>
    @if(!collapsed) {
        <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
        <div class="card-body">
            <h5>Antwoord</h5> 
            @Question.Answer
        </div>
        <div class="container">
            @if (FollowUpQuestions != null && FollowUpQuestions.Count() > 0)
            {
                <h5>Follow up keuzeopties:</h5>
                foreach (var FollowUpQuestion in FollowUpQuestions)
                {
                    <ChatbotAccordion Question=FollowUpQuestion OnDelete=HandleDelete/>
                }
            }
            <ChatbotPopup ParentQuestion=Question Text="Voeg keuzeoptie toe" Refresh=HandleRefresh/>
        </div>
    </div>
    }
</div>

@code {
    private bool collapsed = true;

    [Parameter]
    public ChatBotQuestion Question { get; set; }

    [Parameter]
    public EventCallback<ChatBotQuestion> OnDelete { get; set; }

    IEnumerable<ChatBotQuestion>? FollowUpQuestions;

    protected override async Task OnInitializedAsync()
    {
        FollowUpQuestions = Question.FollowUpQuestions;
    }

    private async Task HandleDelete(ChatBotQuestion Question)
    {
        OnDelete.InvokeAsync(Question);
        if(FollowUpQuestions.Contains(Question))
        {
            FollowUpQuestions = FollowUpQuestions.Where(x => x != Question);
        }
    }

    protected async Task HandleRefresh()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    void DeleteQuestion()
    {
        HandleDelete(Question);
        ChatbotService.DeleteById(Question.Id);
    }

    void Collapse()
    {
        collapsed = !collapsed;
    }
}