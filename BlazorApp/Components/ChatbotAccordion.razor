@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using BlazorApp.Data
@using BlazorApp.Services
@using BlazorApp.Models
@using BlazorApp.Controllers
@inject DatabaseContext databaseContext
@using Microsoft.AspNetCore.Components
@inject ChatbotService ChatbotService

<div class="card @(collapsed ? "" : "border border-dark")">
    <div class="card-header d-flex justify-content-between" id="headingOne" @onclick=this.Collapse>
    <h5 class="mb-0">
        <button class="btn" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
        @question.Question
        </button>
    </h5>
    @if(followUpQuestions == null || followUpQuestions.Count() == 0) {
        <button type="button" class="close mx-2" aria-label="Close" @onclick="() => DeleteQuestion()" @onclick:stopPropagation="true">
            <span aria-hidden="true">&times;</span>
        </button>
    }
    </div>
    @if(!collapsed) {
        <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
        <div class="card-body">
            <h5>Antwoord</h5> 
            @question.Answer
        </div>
        <div class="container">
            @if (followUpQuestions != null && followUpQuestions.Count() > 0)
            {
                <h5>Follow up keuzeopties:</h5>
                foreach (var followUpQuestion in followUpQuestions)
                {
                    <ChatbotAccordion question=followUpQuestion onDelete=OnDelete/>
                }
            }
            <ChatbotPopup parentQuestion=question text="Voeg keuzeoptie toe" refresh=refresh/>
        </div>
    </div>
    }
</div>

@code {
    private bool collapsed = true;

    [Parameter]
    public ChatBotQuestion question { get; set; }

    [Parameter]
    public EventCallback<ChatBotQuestion> onDelete { get; set; }

    IEnumerable<ChatBotQuestion>? followUpQuestions;

    protected override async Task OnInitializedAsync()
    {
        followUpQuestions = question.FollowUpQuestions;
    }

    private async Task OnDelete(ChatBotQuestion question)
    {
        onDelete.InvokeAsync(question);
        if(followUpQuestions.Contains(question))
        {
            followUpQuestions = followUpQuestions.Where(x => x != question);
        }
    }

    protected async Task refresh()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    void DeleteQuestion()
    {
        OnDelete(question);
        ChatbotService.DeleteById(question.Id);
    }

    void Collapse()
    {
        collapsed = !collapsed;
    }
}