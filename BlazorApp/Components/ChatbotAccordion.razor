@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using Services.CMS;
@using Shared.DTO.CMS;
@using Persistence.Data;
@inject DatabaseContext databaseContext
@using Microsoft.AspNetCore.Components
@inject ChatbotService chatbotService
@using BlazorApp.Components.Modals;

<div class="card @(collapsed ? "" : "border border-dark")">
    <div class="card-header d-flex justify-content-between" id="headingOne" @onclick=this.Collapse>
        <h5 class="mb-0">
            <button class="btn" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                @Question.Question
            </button>
        </h5>
        @if (FollowUpQuestions == null || FollowUpQuestions.Count() == 0)
        {
            <button type="button" class="close mx-2" aria-label="Close" @onclick="() => DeleteQuestion()"
                @onclick:stopPropagation="true">
                <span aria-hidden="true">&times;</span>
            </button>
        }
    </div>
    @if (!collapsed)
    {
        <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
            <div class="card-body">
                <h5>Antwoord</h5>
                @((MarkupString)Question.Answer)
            </div>
            <div class="container">
                @if (FollowUpQuestions != null && FollowUpQuestions.Count() > 0)
                {
                    <h5>Follow up keuzeopties:</h5>
                    foreach (var FollowUpQuestion in FollowUpQuestions)
                    {
                        <ChatbotAccordion Question=FollowUpQuestion OnDelete=DeleteChatBotQuestion />
                    }
                }
                <ChatbotPopup ParentQuestion=Question Text="Voeg keuzeoptie toe" Refresh=HandleRefresh />
            </div>
        </div>
    }
</div>

@code {
    private bool collapsed = true;

    [Parameter]
    public ChatBotQuestionDTO Question { get; set; }

    [Parameter]
    public EventCallback<ChatBotQuestionDTO> OnDelete { get; set; }

    IEnumerable<ChatBotQuestionDTO> FollowUpQuestions;

    protected override void OnInitialized()
    {
        FollowUpQuestions = Question.FollowUpQuestions;
    }

    private async Task DeleteChatBotQuestion(ChatBotQuestionDTO question)
    {
        await OnDelete.InvokeAsync(question);
        if (FollowUpQuestions.Contains(question))
        {
            FollowUpQuestions = FollowUpQuestions.Where(x => x != Question);
        } 
    }

    protected async Task HandleRefresh()
    {
        await OnInitializedAsync();

        IEnumerable<ChatBotQuestionDTO> questions = await chatbotService.GetContent();
        Question = questions.FirstOrDefault(x => x.Id == Question.Id);
        FollowUpQuestions = Question.FollowUpQuestions;
        StateHasChanged();
    }

    private async Task DeleteQuestion()
    {
        try {
            await DeleteChatBotQuestion(Question);
            await chatbotService.DeleteById(Question.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    public void Collapse()
    {
        collapsed = !collapsed;
    }
}