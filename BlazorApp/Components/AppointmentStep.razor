@using BlazorApp.Data
@using BlazorApp.Services.Core
@using BlazorApp.Models
@using BlazorApp.Controllers
@using BlazorApp.Auth
@using BlazorApp.Components.Modals
@inject TimeSlotService timeSlotService
@inject DatabaseContext databaseContext
@using Shared
@using BlazorApp.BlazorShared

<div class="afspraakbox container">
    <div class="dateselector d-flex justify-content-center">
        <button class="dateselector-btn" @onclick="DecreaseDate">ðŸ œ</button>
        <InputDate @bind-Value="@_selectedDate" @onchange="filterTimeSlots"></InputDate>
        <button class="dateselector-btn" @onclick="IncreaseDate">ðŸ ž</button>
    </div>


        <b>Beschikbare tijdslots voor dokter @Doctor.Name op @_selectedDate.ToString("dd/MM/yyyy")</b>

        @if(FilteredTimeSlots != null && FilteredTimeSlots.Count() > 0)
        {
            @foreach (var timeSlot in FilteredTimeSlots)
            {
                <div class="card">
                    <button class="timeslot" @onclick="() => ChooseDate(timeSlot.Id)">@timeSlot.DateTime.ToString("HH:mm") âžœ  @timeSlot.DateTime.AddMinutes(timeSlot.Duration).ToString("HH:mm")</button>
                </div>
            }
        } else {
            <p>Er zijn geen tijdslots beschikbaar op deze datum.</p>
        }
</div>

<style>
    .e-calendar .e-content .e-cell.has-time-slot span.e-day,
    .e-calendar .e-content .e-cell.no-time-slot span.e-day {
        background-color: #28a745;
        border-radius: 50%;
        border: 2px solid #000;
        display: inline-block;
    }

    .e-calendar .e-content .e-cell.has-time-slot span.e-day {
        background-color: #28a745;
    }

    .e-calendar .e-content .e-cell.no-time-slot span.e-day {
        background-color: #dc3545;
    }
</style>





@code {
    [Parameter]
    public EventCallback<int?> OnTimeSlotSelected { get; set; }

    [Parameter]
    public IEnumerable<TimeSlotDTO> TimeSlotObj { get; set; }

    private IEnumerable<TimeSlotDTO> FilteredTimeSlots { get; set; }

    [Parameter]
    public DoctorDTO Doctor { get; set; }

    private DateTime _selectedDate;

    public DateTime? SelectedDate { get; set; } = DateTime.Now;
    public string SelectedValue { get; set; } = DateTime.Now.ToString("M/d/yyyy");
    public DateTime? CurrentDate { get; set; } = DateTime.Now;

    private async Task ChooseDate(int? timeSlotId)
    {
        // Simulate choosing a time
        await OnTimeSlotSelected.InvokeAsync(timeSlotId);

        Console.WriteLine("TimeSlotId: " + timeSlotId);
    }
    

    protected override async Task OnInitializedAsync()
    {
        _selectedDate = DateTime.Now;
        TimeSlotObj = await timeSlotService.GetTimeSlots(Doctor);
        TimeSlotObj = TimeSlotObj.Where(x => x.AppointmentDTO == null);
        filterTimeSlots();
    }

    private void DecreaseDate()
    {
        _selectedDate = _selectedDate.AddDays(-1);
        filterTimeSlots();
    }

    private void IncreaseDate()
    {
        _selectedDate = _selectedDate.AddDays(1);
        filterTimeSlots();
    }

    private void filterTimeSlots()
    {
        FilteredTimeSlots = TimeSlotObj.Where(x => x.DateTime.Date == _selectedDate.Date);
    }


    public void CustomDates(RenderDayCellEventArgs args)
    {
        if (args == null || args.Date == null || TimeSlotObj == null)
        {
            // Handle or log the null case
            return;
        }

        var currentDate = args.Date.Date;

        // Check if there is any time slot for the current date
        bool hasTimeSlot = TimeSlotObj.Any(timeSlot =>
        timeSlot.DateTime.Date == currentDate.Date);

        if (hasTimeSlot)
        {
            args.CellData.ClassList += " has-time-slot"; // Apply a CSS class for dates with a TimeSlot
        }
        else
        {
            args.CellData.ClassList += " no-time-slot"; // Apply a different CSS class for dates without a TimeSlot
        }
    }



}
