@using BlazorApp.Data
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using System.Text.Json.Serialization;

<div>
    <div class="buttons">
        <Button Color="Color.Primary" Clicked="@ShowModal">Edit</Button>
    </div>
    <div>
        <h1>title</h1>
            <p>
                context
            </p>
        @* @foreach(var h in header){
            <h1>@h.title</h1>
            <p>
                @h.context
            </p>
                
            } *@
            </div>
    <Modal @ref="modalRef">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>header wijziging</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Titel</FieldLabel>
                    <TextEdit Placeholder="Geef titel..." @bind-Text="newtitle" />
                </Field>
                <Field>
                    <FieldLabel>Beschrijving</FieldLabel>
                    @* rich *@
                    <RichTextEditor />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
                @* <Button Color="Color.Primary" Clicked="@UpdateTitle">Opslaan</Button> *@
            </ModalFooter>
        </ModalContent>
    </Modal>
    <p>The value of the title field is: @newtitle</p>
</div>

@code {

    string newtitle;
    string context;

    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    public class HomeH
    {
        public string title { get; set; }
        public string context { get; set; }

        

    }

    @* string API_URL = "http://localhost:5075/";

    private IEnumerable<HomeH> header = Array.Empty<HomeH>();

    private async Task refreshList()
    {
 Console.WriteLine("header");
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.GetAsync(API_URL + "api/Header/GetContent");
        httpClient.Dispose();
        using var responseStream = await response.Content.ReadAsStreamAsync();
        header = await JsonSerializer.DeserializeAsync<IEnumerable<HomeH>>(responseStream);

       
    }

    protected override async Task OnInitializedAsync()
    {
        await this.refreshList();
    }


    private async Task UpdateTitle()
    {
        var updateData = new HomeH { title = newtitle, context=""};

        // Serialize the object to JSON
        var json = System.Text.Json.JsonSerializer.Serialize(updateData);

        // Create a StringContent object with JSON data
        var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

        // Send the PUT request to update the title
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.PutAsync(API_URL + "api/Header/putContent", content); // Adjust the URL

        httpClient.Dispose();

         Console.WriteLine(response.IsSuccessStatusCode);

        // Check the response for success
        if (response.IsSuccessStatusCode)
        {
            // Successful update
            Console.WriteLine("fsadfasdf");
            await refreshList(); // Refresh the list of titles after updating
            await HideModal();
        }
        else
        {
            // Handle the failure
            // You can display an error message or take appropriate action here
            Console.WriteLine("it is failing");

        } *@
    }

}
