@using Models
@using Microsoft.AspNetCore.Components;
@using Shared.DTO.Core;
@using Services.Core;
@inject PatientService patientService;
@inject AppointmentService appointmentService;
@inject TimeSlotService timeSlotService;

<div class="template-wrap d-flex justify-content-between">
    @{
            <Modal @ref="modalRef" class="modal">
                <ModalContent Centered>
                    <ModalHeader>
                        <ModalTitle>Maak afspraak</ModalTitle>
                        <CloseButton />
                    </ModalHeader>
                    <ModalBody>
                        <Field>
                            <FieldBody>
                                    <FieldLabel>PatiÃ«nt</FieldLabel>
                                    <Select TValue="int" @bind-SelectedValue="patientId">
                                    @if(patients != null) {
                                        @foreach (var patient in patients)
                                        {
                                            <SelectItem Value="@patient.Id">@patient.Name</SelectItem>
                                        }
                                    }
                                    </Select>
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldBody>
                                <FieldLabel>Reden</FieldLabel>
                                <TextEdit Placeholder="Reden" @bind-Text="reason" />
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldBody>
                                <FieldLabel>Opmerking</FieldLabel>
                                <TextEdit Placeholder="Opmerking" @bind-Text="note" />
                            </FieldBody>
                        </Field>
                        <Field>
                            <FieldBody>
                                <FieldLabel>Type</FieldLabel>
                                <Select TValue="Shared.Enums.AppointmentType" @bind-Value="type">
                                    @foreach (Shared.Enums.AppointmentType type in Enum.GetValues(typeof(Shared.Enums.AppointmentType)))
                                    {
                                        <SelectItem Value="@type">@type</SelectItem>
                                    }
                                </Select>
                            </FieldBody>
                        </Field>
                    </ModalBody>
                    <ModalFooter>
                        <Button Color="Color.Primary" Clicked="@CreateAppointment">Maak</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        }
    }
</div>

@code {

    [Parameter]
    public TimeSlotDTO TimeSlot { get; set; }

    private Modal? modalRef;
    private IEnumerable<PatientDTO> patients;

    private int patientId;
    private string reason;
    private string note;
    private Shared.Enums.AppointmentType type;

    public Task? ShowModal()
    {
        if(modalRef == null)
            return Task.CompletedTask;
        return modalRef?.Show();
    }

    private async Task CreateAppointment()
    {

        Console.WriteLine(patientId);

        await appointmentService.CreateAppointment((int)TimeSlot.Id, patientId, reason, note);
        await modalRef?.Hide();
    }

    protected override async Task OnInitializedAsync()
    {   
        TimeSlot = new TimeSlotDTO();
        patients = await patientService.GetPatients();
    }
}

<style>
    .modal {
        color: black;
    }
</style>