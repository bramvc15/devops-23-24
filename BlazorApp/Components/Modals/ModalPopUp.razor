@using Microsoft.AspNetCore.Components;
@using System.Text.Json
@using System.Text.Json.Serialization;
@using Services.CMS;
@using Shared.DTO.CMS;
@using Persistence.Data;
@inject LocationService locationService
@inject DatabaseContext databaseContext

<div>
    <div class="buttons">
        <Button Color="Color.Primary" Clicked="@ShowModal">Wijzig</Button>
    </div>


    <Modal @ref="modalRef">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>Locatie wijziging</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <RichTextEdit @ref="richTextEditRef" Theme="RichTextEditTheme.Snow" ContentChanged="@OnContentChanged"
                                  PlaceHolder="Locatie..." ReadOnly="@readOnly" SubmitOnEnter="false"
                                  EnterPressed="@OnSave" ToolbarPosition="Placement.Bottom">
                        <Editor>@content</Editor>
                        <Toolbar>
                            <RichTextEditToolbarGroup>
                                <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                                <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                                    <RichTextEditToolbarSelectItem Value="small" />
                                    <RichTextEditToolbarSelectItem Selected />
                                    <RichTextEditToolbarSelectItem Value="large" />
                                    <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
                                </RichTextEditToolbarSelect>
                                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
                            </RichTextEditToolbarGroup>
                            <!-- Custom toolbar content -->
                            <RichTextEditToolbarGroup Float="Float.End">
                                <Button onClick="window.open('https://www.quilljs.com/','quilljs')">
                                    <Icon Name="IconName.InfoCircle" />
                                </Button>
                                <Button Clicked="@OnSave">
                                    <Icon Name="IconName.Save" />
                                </Button>
                            </RichTextEditToolbarGroup>
                        </Toolbar>
                    </RichTextEdit>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
                <Button Color="Color.Primary" Clicked="@UpdateLocation">Opslaan</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>


</div>

@code {
    protected new RichTextEdit richTextEditRef;
    protected bool readOnly;
    protected string contentAsHtml;
    protected string contentAsDeltaJson;
    protected string contentAsText;
    protected string savedContent;
    protected string? content;
    private LocationDTO location;

    string? plainTextContent;
    string? context;

    private Modal? modalRef;

    private async Task<Task?> ShowModal()
    {
        location = await locationService.GetLocation();
        context = location.Context;
        await richTextEditRef.SetHtmlAsync(context);
        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    public async Task OnContentChanged()
    {
        contentAsHtml = await richTextEditRef.GetHtmlAsync();
        contentAsDeltaJson = await richTextEditRef.GetDeltaAsync();
        contentAsText = await richTextEditRef.GetTextAsync();
    }

    public async Task OnSave()
    {
        savedContent = await richTextEditRef.GetHtmlAsync();
        await richTextEditRef.ClearAsync();
    }

    private async Task UpdateLocation()
    {
        content = await richTextEditRef.GetHtmlAsync();
        LocationDTO loc = new()
        {
            Id = location.Id,
            Context = content
        };
        await locationService.UpdateLocation(loc);
        modalRef?.Hide();
    }
}
