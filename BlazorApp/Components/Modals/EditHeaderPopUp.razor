@using BlazorApp.Data
@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using System.Text.Json.Serialization;
@using BlazorApp.Services.CMS
@using BlazorApp.Controllers
@inject CMSHomeHeaderService homeHeaderService
@inject DatabaseContext databaseContext

<div>
    <div class="buttons">
        <Button Color="Color.Primary" Clicked="@ShowModal">Wijzig</Button>
    </div>
    <div>
        @if (homeHeader != null) {
            <h1>@homeHeader.Title</h1>

            @((MarkupString)homeHeader.Context!)
        } else {
            <p>Loading...</p>
        }
    </div>
    <Modal @ref="modalRef">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>Header wijziging</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Titel</FieldLabel>
                    <TextEdit Placeholder="Geef titel..." @bind-Text="newTitle" />
                </Field>
                <Field>
                    <FieldLabel>Beschrijving</FieldLabel>
                    @* rich *@
                    <RichTextEditor @ref="richTextEditRef" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
                <Button Color="Color.Primary" Clicked="@UpdateTitle">Opslaan</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
    <p>De waarde van het title field is: @newTitle</p>
    @plainTextContent <!-- Plain text content -->

</div>

@code {
    protected RichTextEditor? richTextEditRef;
    protected string? content;
    CMSHomeHeader? header;
    int headerId;
    string? newTitle;

    string? plainTextContent;
    string? context;

    private Modal? modalRef;

    private Task? ShowModal()
    {
        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    private async Task UpdateTitle()
    {
        plainTextContent = richTextEditRef?.contentAsText;
        content = richTextEditRef?.contentAsHtml;
        CMSHomeHeader header = new()
        {
            Title = newTitle,
            Context = content
        };
        await homeHeaderService.UpdateHomeHeader(header);
        modalRef?.Hide();
    }

    CMSHomeHeader? homeHeader;

    protected override async Task OnInitializedAsync()
    {
        homeHeader = await homeHeaderService.GetHomeHeader();
    }
}