@using Services.CMS;
@using Shared.DTO.CMS;
@using Persistence.Data; 
@inject DatabaseContext databaseContext
@inject TreatmentService treatmentService
@inject NavigationManager NavManager

<button class="addTreatmentButton" onclick="@ShowModal">Nieuwe behandeling</button>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Behandeling wijzigen</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Naam</FieldLabel>
                <TextEdit Placeholder="Naam behandeling..." @bind-Text="newName" />
            </Field>
            @if (string.IsNullOrWhiteSpace(newName))
                    {
                        <p class="text-danger">Naam is verplicht</p>
                    }
            <Field>
                <FieldLabel>Beschrijving</FieldLabel>
                <TextEdit Placeholder="" @bind-Text="newDescription" />
            </Field>
            @if (string.IsNullOrWhiteSpace(newDescription))
                    {
                        <p class="text-danger">Beschrijving is verplicht</p>
                    }
            <Field>
                <FieldLabel>Afbeelding</FieldLabel>
                <TextEdit Placeholder="Geef afbeelding link..." @bind-Text="newImage" />
            </Field>
            @if (string.IsNullOrWhiteSpace(newImage))
                    {
                        <p class="text-danger">Afbeelding is verplicht</p>
                    }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
            <Button Color="Color.Primary" Clicked="@CreateTreatment" Disabled="@(!AreRequiredFieldsFilled())">Opslaan</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool visible = false;
    private string message = string.Empty;

    private string searchQuery = "";

    int? id;
    string? newName;
    string? newDescription;
    string? newImage;

    private Modal? modalRef;

    private async Task<Task?> ShowModal()
    {
        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    private async void CreateTreatment()
    {

        visible = false;
        message = string.Empty;

        var authenticationState = await authenticationStateTask;

        if (authenticationState.User.IsInRole("Admin"))
        {

        TreatmentDTO treatment = new()
            {
                Name = newName,
                Description = newDescription,
                ImageLink = newImage
            };
        await treatmentService.CreateTreatment(treatment);
        await HideModal();
        NavManager.NavigateTo("/admin/cms/behandelingen", true);

        }
        else
        {
            message = "U heeft geen toegang tot creatie.";
            visible = true;
        }
    }

    private bool AreRequiredFieldsFilled()
    {
        return !string.IsNullOrWhiteSpace(newName)
        && !string.IsNullOrWhiteSpace(newDescription)
        && !string.IsNullOrWhiteSpace(newImage);
    }

}