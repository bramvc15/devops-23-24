@using Services.Core;
@using Shared.DTO.Core;
@using Shared.Enums;
@using Persistence.Data;
@using Newtonsoft.Json;
@inject DatabaseContext databaseContext
@inject DoctorService doctorService

<div>
    <div class="buttons">
        <button class="add-btn" onclick="@ShowModal">Voeg een dokter toe</button>
    </div>
    <Modal @ref="modalRef">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>Dokter toevoegen</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <div class="alert-container">
                <Alert Color="Color.Danger" @bind-Visible="@visible">
                    <AlertDescription>
                        @message
                    </AlertDescription>
                    <AlertMessage>
                        @* Gebruiken we niet. *@
                    </AlertMessage>
                    <CloseButton />
                </Alert>
            </div>
            <ModalBody>
                <Field>
                    <FieldLabel>Naam</FieldLabel>
                    <TextEdit Placeholder="Geef een naam" @bind-Text="newName" />
                    @if (string.IsNullOrWhiteSpace(newName))
                    {
                        <p class="text-danger">Naam is verplicht</p>
                    }
                </Field>
                <Field>
                    <FieldLabel>Email</FieldLabel>
                    <TextEdit Placeholder="Geef een email" @bind-Text="newEmail" />
                </Field>
                <Field>
                    <FieldLabel>Wachtwoord</FieldLabel>
                    <TextEdit Placeholder="Geef een wachtwoord" @bind-Text="newPassword" />
                </Field>
                <Field>
                    <FieldLabel>Email</FieldLabel>
                    <TextEdit Placeholder="Geef een email" @bind-Text="newEmail" />
                </Field>
                <Field>
                    <FieldLabel>Wachtwoord</FieldLabel>
                    <TextEdit Placeholder="Geef een wachtwoord" @bind-Text="newPassword" />
                </Field>
                <Field>
                    <FieldLabel>Specialisatie</FieldLabel>
                    <TextEdit Placeholder="Geef een specialisatie" @bind-Text="newSpecialization" />
                    @if (string.IsNullOrWhiteSpace(newSpecialization))
                    {
                        <p class="text-danger">Specialisatie is verplicht</p>
                    }
                </Field>
                <Field>
                    <FieldLabel>Geslacht</FieldLabel>
                    <Select @bind-SelectedValue="@newGender">
                        <SelectItem Value="Gender.Male">Man</SelectItem>
                        <SelectItem Value="Gender.Female">Vrouw</SelectItem>
                        <SelectItem Value="Gender.Other">Andere</SelectItem>
                    </Select>
                </Field>
                <Field>
                    <FieldLabel>Biografie</FieldLabel>
                    <TextEdit Placeholder="Geef een biografie" @bind-Text="newBiograph" />
                </Field>
                <Field>
                    <FieldLabel>Link naar profielfoto</FieldLabel>
                    <TextEdit Placeholder="Geef link naar image van dokter" @bind-Text="newImageLink" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Sluit</Button>
                <Button Color="Color.Primary" Clicked="@CreateDoctor">Toevoegen</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool visible = false;
    private string message = string.Empty;

    string newName;
    string newSpecialization;
    Gender newGender;
    string? newBiograph;
    string? newImageLink;

    private EditContext editContext;
    string newEmail;
    string newPassword;

    private Modal? modalRef;

    protected override void OnInitialized()
    {
        DoctorDTO doctor = new();

        editContext = new EditContext(doctor);
        editContext.OnFieldChanged += (sender, eventArgs) =>
        {
            editContext.Validate();
            StateHasChanged();
        };
    }

    private Task? ShowModal()
    {
        return modalRef?.Show();
    }

    private Task? HideModal()
    {
        return modalRef?.Hide();
    }

    private async Task CreateDoctor()
    {
        visible = false;
        message = string.Empty;

        var authenticationState = await authenticationStateTask;

        if (authenticationState.User.IsInRole("Admin"))
        {
            try
            {
                // token puur voor testing
                var token = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IklwSGhudDJDMFhiU3FqSnFRSWgtRCJ9.eyJpc3MiOiJodHRwczovL3Zpc2lvbi1vb2djZW50cnVtLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJmaUxFbU5ubzhucnZtZ21HaWZwYk1UM3F2VlFicGlGYUBjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly92aXNpb24tb29nY2VudHJ1bS5ldS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTcwMjU2MjgwMCwiZXhwIjoxNzAyNjQ5MjAwLCJhenAiOiJmaUxFbU5ubzhucnZtZ21HaWZwYk1UM3F2VlFicGlGYSIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6dXNlcnMgdXBkYXRlOnVzZXJzIGRlbGV0ZTp1c2VycyBjcmVhdGU6dXNlcnMgcmVhZDp1c2Vyc19hcHBfbWV0YWRhdGEgdXBkYXRlOnVzZXJzX2FwcF9tZXRhZGF0YSBkZWxldGU6dXNlcnNfYXBwX21ldGFkYXRhIGNyZWF0ZTp1c2Vyc19hcHBfbWV0YWRhdGEgcmVhZDp1c2VyX2N1c3RvbV9ibG9ja3MgY3JlYXRlOnVzZXJfY3VzdG9tX2Jsb2NrcyBkZWxldGU6dXNlcl9jdXN0b21fYmxvY2tzIGNyZWF0ZTp1c2VyX3RpY2tldHMgcmVhZDpjbGllbnRzIHVwZGF0ZTpjbGllbnRzIGRlbGV0ZTpjbGllbnRzIGNyZWF0ZTpjbGllbnRzIHJlYWQ6Y2xpZW50X2tleXMgdXBkYXRlOmNsaWVudF9rZXlzIGRlbGV0ZTpjbGllbnRfa2V5cyBjcmVhdGU6Y2xpZW50X2tleXMgcmVhZDpjb25uZWN0aW9ucyB1cGRhdGU6Y29ubmVjdGlvbnMgZGVsZXRlOmNvbm5lY3Rpb25zIGNyZWF0ZTpjb25uZWN0aW9ucyByZWFkOnJlc291cmNlX3NlcnZlcnMgdXBkYXRlOnJlc291cmNlX3NlcnZlcnMgZGVsZXRlOnJlc291cmNlX3NlcnZlcnMgY3JlYXRlOnJlc291cmNlX3NlcnZlcnMgcmVhZDpkZXZpY2VfY3JlZGVudGlhbHMgdXBkYXRlOmRldmljZV9jcmVkZW50aWFscyBkZWxldGU6ZGV2aWNlX2NyZWRlbnRpYWxzIGNyZWF0ZTpkZXZpY2VfY3JlZGVudGlhbHMgcmVhZDpydWxlcyB1cGRhdGU6cnVsZXMgZGVsZXRlOnJ1bGVzIGNyZWF0ZTpydWxlcyByZWFkOnJ1bGVzX2NvbmZpZ3MgdXBkYXRlOnJ1bGVzX2NvbmZpZ3MgZGVsZXRlOnJ1bGVzX2NvbmZpZ3MgcmVhZDpob29rcyB1cGRhdGU6aG9va3MgZGVsZXRlOmhvb2tzIGNyZWF0ZTpob29rcyByZWFkOmFjdGlvbnMgdXBkYXRlOmFjdGlvbnMgZGVsZXRlOmFjdGlvbnMgY3JlYXRlOmFjdGlvbnMgcmVhZDplbWFpbF9wcm92aWRlciB1cGRhdGU6ZW1haWxfcHJvdmlkZXIgZGVsZXRlOmVtYWlsX3Byb3ZpZGVyIGNyZWF0ZTplbWFpbF9wcm92aWRlciBibGFja2xpc3Q6dG9rZW5zIHJlYWQ6c3RhdHMgcmVhZDppbnNpZ2h0cyByZWFkOnRlbmFudF9zZXR0aW5ncyB1cGRhdGU6dGVuYW50X3NldHRpbmdzIHJlYWQ6bG9ncyByZWFkOmxvZ3NfdXNlcnMgcmVhZDpzaGllbGRzIGNyZWF0ZTpzaGllbGRzIHVwZGF0ZTpzaGllbGRzIGRlbGV0ZTpzaGllbGRzIHJlYWQ6YW5vbWFseV9ibG9ja3MgZGVsZXRlOmFub21hbHlfYmxvY2tzIHVwZGF0ZTp0cmlnZ2VycyByZWFkOnRyaWdnZXJzIHJlYWQ6Z3JhbnRzIGRlbGV0ZTpncmFudHMgcmVhZDpndWFyZGlhbl9mYWN0b3JzIHVwZGF0ZTpndWFyZGlhbl9mYWN0b3JzIHJlYWQ6Z3VhcmRpYW5fZW5yb2xsbWVudHMgZGVsZXRlOmd1YXJkaWFuX2Vucm9sbG1lbnRzIGNyZWF0ZTpndWFyZGlhbl9lbnJvbGxtZW50X3RpY2tldHMgcmVhZDp1c2VyX2lkcF90b2tlbnMgY3JlYXRlOnBhc3N3b3Jkc19jaGVja2luZ19qb2IgZGVsZXRlOnBhc3N3b3Jkc19jaGVja2luZ19qb2IgcmVhZDpjdXN0b21fZG9tYWlucyBkZWxldGU6Y3VzdG9tX2RvbWFpbnMgY3JlYXRlOmN1c3RvbV9kb21haW5zIHVwZGF0ZTpjdXN0b21fZG9tYWlucyByZWFkOmVtYWlsX3RlbXBsYXRlcyBjcmVhdGU6ZW1haWxfdGVtcGxhdGVzIHVwZGF0ZTplbWFpbF90ZW1wbGF0ZXMgcmVhZDptZmFfcG9saWNpZXMgdXBkYXRlOm1mYV9wb2xpY2llcyByZWFkOnJvbGVzIGNyZWF0ZTpyb2xlcyBkZWxldGU6cm9sZXMgdXBkYXRlOnJvbGVzIHJlYWQ6cHJvbXB0cyB1cGRhdGU6cHJvbXB0cyByZWFkOmJyYW5kaW5nIHVwZGF0ZTpicmFuZGluZyBkZWxldGU6YnJhbmRpbmcgcmVhZDpsb2dfc3RyZWFtcyBjcmVhdGU6bG9nX3N0cmVhbXMgZGVsZXRlOmxvZ19zdHJlYW1zIHVwZGF0ZTpsb2dfc3RyZWFtcyBjcmVhdGU6c2lnbmluZ19rZXlzIHJlYWQ6c2lnbmluZ19rZXlzIHVwZGF0ZTpzaWduaW5nX2tleXMgcmVhZDpsaW1pdHMgdXBkYXRlOmxpbWl0cyBjcmVhdGU6cm9sZV9tZW1iZXJzIHJlYWQ6cm9sZV9tZW1iZXJzIGRlbGV0ZTpyb2xlX21lbWJlcnMgcmVhZDplbnRpdGxlbWVudHMgcmVhZDphdHRhY2tfcHJvdGVjdGlvbiB1cGRhdGU6YXR0YWNrX3Byb3RlY3Rpb24gcmVhZDpvcmdhbml6YXRpb25zX3N1bW1hcnkgY3JlYXRlOmF1dGhlbnRpY2F0aW9uX21ldGhvZHMgcmVhZDphdXRoZW50aWNhdGlvbl9tZXRob2RzIHVwZGF0ZTphdXRoZW50aWNhdGlvbl9tZXRob2RzIGRlbGV0ZTphdXRoZW50aWNhdGlvbl9tZXRob2RzIHJlYWQ6b3JnYW5pemF0aW9ucyB1cGRhdGU6b3JnYW5pemF0aW9ucyBjcmVhdGU6b3JnYW5pemF0aW9ucyBkZWxldGU6b3JnYW5pemF0aW9ucyBjcmVhdGU6b3JnYW5pemF0aW9uX21lbWJlcnMgcmVhZDpvcmdhbml6YXRpb25fbWVtYmVycyBkZWxldGU6b3JnYW5pemF0aW9uX21lbWJlcnMgY3JlYXRlOm9yZ2FuaXphdGlvbl9jb25uZWN0aW9ucyByZWFkOm9yZ2FuaXphdGlvbl9jb25uZWN0aW9ucyB1cGRhdGU6b3JnYW5pemF0aW9uX2Nvbm5lY3Rpb25zIGRlbGV0ZTpvcmdhbml6YXRpb25fY29ubmVjdGlvbnMgY3JlYXRlOm9yZ2FuaXphdGlvbl9tZW1iZXJfcm9sZXMgcmVhZDpvcmdhbml6YXRpb25fbWVtYmVyX3JvbGVzIGRlbGV0ZTpvcmdhbml6YXRpb25fbWVtYmVyX3JvbGVzIGNyZWF0ZTpvcmdhbml6YXRpb25faW52aXRhdGlvbnMgcmVhZDpvcmdhbml6YXRpb25faW52aXRhdGlvbnMgZGVsZXRlOm9yZ2FuaXphdGlvbl9pbnZpdGF0aW9ucyBkZWxldGU6cGhvbmVfcHJvdmlkZXJzIGNyZWF0ZTpwaG9uZV9wcm92aWRlcnMgcmVhZDpwaG9uZV9wcm92aWRlcnMgdXBkYXRlOnBob25lX3Byb3ZpZGVycyBkZWxldGU6cGhvbmVfdGVtcGxhdGVzIGNyZWF0ZTpwaG9uZV90ZW1wbGF0ZXMgcmVhZDpwaG9uZV90ZW1wbGF0ZXMgdXBkYXRlOnBob25lX3RlbXBsYXRlcyBjcmVhdGU6ZW5jcnlwdGlvbl9rZXlzIHJlYWQ6ZW5jcnlwdGlvbl9rZXlzIHVwZGF0ZTplbmNyeXB0aW9uX2tleXMgZGVsZXRlOmVuY3J5cHRpb25fa2V5cyByZWFkOmNsaWVudF9jcmVkZW50aWFscyBjcmVhdGU6Y2xpZW50X2NyZWRlbnRpYWxzIHVwZGF0ZTpjbGllbnRfY3JlZGVudGlhbHMgZGVsZXRlOmNsaWVudF9jcmVkZW50aWFscyIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.dJDLmgmrGyEPFvRVM5f71-Xyfs7xuCKKQ3vIhf0UApXrK-ulbzkC5IYlYJTzppbOMB1mA9KxTuVNCaleQ2u3wA5OtRQxM3BwXYfHqmc83X6-D2T65Jhp4XKCBdFrA24CsvFPjuJbUMw55Snn0nvv5rsMHzL34Cl5HJj2E3ktKrjajC7RG9CPU17ZpVNRDa60uDW0efchx-kpSRgStqMIjseCw5wOSIrV7DOD7r0okpd4SYE5Zw2OFA2C2ZFCP5Yct-5SQJniX6jrZaZPFZCd7zww3fZzpl8rQDPRo-7yENRRObTXFSdyRG6j81lUNwVytlud0nvE83j9lBM-7EbTSw";
                var client = new HttpClient();
                var request = new HttpRequestMessage(HttpMethod.Post, "https://vision-oogcentrum.eu.auth0.com/api/v2/users");
                request.Headers.Add("Accept", "application/json");
                request.Headers.Add("Authorization", $"Bearer {token}");
                var content = new StringContent(
                    $"{{\"email\":\"{newEmail}\",\"connection\":\"Username-Password-Authentication\",\"password\":\"{newPassword}\",\"username\":\"{newName}\"}}",
                    null,
                    "application/json");
                request.Content = content;
                var response = await client.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    var jsonResponse = await response.Content.ReadAsStringAsync();
                    var userResponse = JsonConvert.DeserializeObject<Response>(jsonResponse);

                    // geef user "Employee" role
                    client = new HttpClient();
                    request = new HttpRequestMessage(HttpMethod.Post, $"https://vision-oogcentrum.eu.auth0.com/api/v2/users/{userResponse.user_id}/roles");
                    request.Headers.Add("Authorization", $"Bearer {token}");
                    content = new StringContent("{\"roles\":[\"rol_ddkuoDMihA4cuRve\"]}", null, "application/json");
                    request.Content = content;
                    response = await client.SendAsync(request);

                    if (response.IsSuccessStatusCode)
                    {
                        DoctorDTO newDoctor = new()
                        {
                            Name = newName,
                            Specialization = newSpecialization,
                            Gender = newGender,
                            Biograph = newBiograph,
                            ImageLink = newImageLink,
                            Auth0Id = userResponse.user_id
                        };
                        await doctorService.CreateDoctor(newDoctor);

                        Console.WriteLine("Success: User created!!!!!!!!");
                    }
                    else
                    {
                        Console.WriteLine($"Error 2: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
                    }
                }
                else
                {
                    Console.WriteLine($"Error 1: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            await HideModal();
        }
        else
        {
            message = "U heeft geen toegang tot creatie.";
            visible = true;
        }
    }

    public class Response
    {
        public dynamic created_at { get; set; }
        public dynamic email { get; set; }
        public dynamic email_verified { get; set; }
        public dynamic name { get; set; }
        public dynamic nickname { get; set; }
        public dynamic picture { get; set; }
        public dynamic updated_at { get; set; }
        public dynamic user_id { get; set; }
        public dynamic username { get; set; }
    }
}