@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using BlazorApp.Data
@using BlazorApp.Services
@using BlazorApp.Models
@using BlazorApp.Controllers
@inject DatabaseContext databaseContext
@using Microsoft.AspNetCore.Components
@inject ChatbotService ChatbotService
@inject NavigationManager NavigationManager

<div class="chatbox-div @(visible ? "visible" : "")">
    <div class="chatbox-header d-flex justify-content-between" @onclick="() => ToggleChatbox()">
        <div class="d-flex">
            ðŸ—¨
            <div class="title">
                Chat
            </div>
        </div>
        <div class="d-flex">
            @if (restartable)
            {
                <div class="restart" @onclick="clearChat" @onclick:stopPropagation="true">
                    â†»
                </div>
            }
            <div class="gear ml-3" @onclick="NavigateToSettingsPage" @onclick:stopPropagation="true">
            â›­
            </div>
        </div>
    </div>
    <div class="chatbox-content @(visible ? "visible" : "")">
        @foreach (var message in chatMessages)
        {
            if(message.Message != null) {
            <ChatMessage Message="@message.Message" type="@message.type" ChatBotObj="@message.ChatBotObj" QuestionClicked="HandleQuestionClicked" /> 
            } else  {
            <ChatMessage type="@message.type" ChatBotObj="@message.ChatBotObj" QuestionClicked="HandleQuestionClicked" />
            }
        }
        @if(typing) {
            <ChatMessage type="bot" Image="images/typingAnimation.gif" />
        }
    </div>
    <script>
        function scrollToBottom() {
            var objDiv = document.getElementsByClassName("chatbox-content")[0];
            objDiv.scrollTo({
                top: objDiv.scrollHeight,
                behavior: 'smooth'
            });
        }
    </script>
</div>



@code {
    public bool visible = false;
    public bool restartable = false;
    public bool typing = false;
    private List<ChatMessage> chatMessages = new List<ChatMessage>();


    IEnumerable<ChatBotQuestion>? ChatBotObj;

    protected override async Task OnInitializedAsync()
    {
        await getChatBotObj();
        startChat();
    }

    private async Task getChatBotObj()
    {
        ChatBotObj = await Task.Run(() => ChatbotService.GetContent());
        ChatBotObj = ChatBotObj.Where(x => x.IsFollowUp == null);
    }

    protected async Task getFollowUpQuestions(ChatBotQuestion question)
    {
        //IEnumerable<ChatBotQuestion>? followUpObj = await Task.Run(() => ChatbotService.GetFollowUpQuestions(question.FollowUpQuestion));
        List<ChatBotQuestion>? followUpObj = question.FollowUpQuestions;
        showQuestions(followUpObj);
    }

    void ToggleChatbox()
    {
        visible = !visible;
    }

    private async Task clearChat()
    {
        while(chatMessages.Last().type != "questions")
        {
            await Task.Delay(100);
        }

        startChat();
    }

    private async void startChat()
    {
        await getChatBotObj();
        chatMessages.Clear();
        chatMessages.Add(new ChatMessage { Message = "Welkom, hoe kan ik u helpen?", type = "bot" });
        StateHasChanged();
        showQuestions(ChatBotObj);
    }

    private async void HandleQuestionClicked(ChatBotQuestion question)
    {
        restartable = false;
        await botResponse(question.Answer);

        ChatBotObj = ChatBotObj.Where(x => x != question);

        if(question.FollowUpQuestions == null || question.FollowUpQuestions.Count() > 0)
        {
            await getFollowUpQuestions(question);
        } else {
            await botResponse("Hebt u verder nog vragen?");

            if(ChatBotObj.Count() == 0)
            {
                await getChatBotObj();
            }

            await showQuestions(ChatBotObj);
        }
    }

    private async Task typingDelay()
    {
        await Task.Delay(100);
        typing = true;
        StateHasChanged();
        await Task.Delay(980);
        typing = false;
        StateHasChanged();
        JSRuntime.InvokeVoidAsync("scrollToBottom");
    }

    private async Task botResponse(string answer)
    {
        await typingDelay();
        chatMessages.Add(new ChatMessage { Message = answer, type = "bot" });
        StateHasChanged();
        JSRuntime.InvokeVoidAsync("scrollToBottom");
    }

    private async Task showQuestions(IEnumerable<ChatBotQuestion>? obj)
    {
        await Task.Delay(450);
        chatMessages.Add(new ChatMessage { Message = null,  type = "questions", ChatBotObj=obj });
        restartable = true;
        StateHasChanged();
        JSRuntime.InvokeVoidAsync("scrollToBottom");
    }

    private void NavigateToSettingsPage()
    {
        NavigationManager.NavigateTo("/chatbot");
    }
}
